{"url": "https://api.github.com/repos/vavr-io/vavr/releases/22254442", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/22254442/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/22254442/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.10.4", "id": 22254442, "author": {"login": "release-drafter[bot]", "id": 40829082, "node_id": "MDM6Qm90NDA4MjkwODI=", "avatar_url": "https://avatars.githubusercontent.com/in/14356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/release-drafter%5Bbot%5D", "html_url": "https://github.com/apps/release-drafter", "followers_url": "https://api.github.com/users/release-drafter%5Bbot%5D/followers", "following_url": "https://api.github.com/users/release-drafter%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/release-drafter%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/release-drafter%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/release-drafter%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/release-drafter%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/release-drafter%5Bbot%5D/repos", "events_url": "https://api.github.com/users/release-drafter%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/release-drafter%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTIyMjU0NDQy", "tag_name": "v0.10.4", "target_commitish": "master", "name": "Patch Release 0.10.4", "draft": false, "prerelease": false, "created_at": "2021-07-14T13:29:37Z", "published_at": "2021-07-14T13:53:37Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.10.4", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.10.4", "body": "## Info\r\n\r\nThis is a maintenance release for the 0.10.x release train. It back ports bug fixes and improvements from the upcoming 1.0.0 release.\r\n\r\n**Please find the complete list of changes [here](https://github.com/vavr-io/vavr/compare/v0.10.3...v0.10.4).**\r\n\r\n**The API Docs can be found [here](https://www.javadoc.io/doc/io.vavr/vavr/0.10.4)**\r\n\r\n## Committers\r\n\r\n\ud83c\udf89 MANY THANKS TO ALL COMMITTERS! \ud83c\udf89\r\n\r\n* \u2b50\ufe0f anton0xf ([@anton0xf](https://github.com/anton0xf))\r\n* \u2b50\ufe0f Gualtiero Testa ([@gualtierotesta](https://github.com/gualtierotesta))\r\n* \u2b50\ufe0f Joachim Bargsten ([@jwbargsten](https://github.com/jwbargsten))\r\n* \u2b50\ufe0f Mincong Huang ([@mincong-h](https://github.com/mincong))\r\n* \u2b50\ufe0f Sergei Semenov ([@sleepytomcat](https://github.com/sleepytomcat))\r\n\r\n## Changes\r\n\r\n* Option<>.collect() not to call PartialFunction collector on arguments where it is not defined (#2580) @sleepytomcat \r\n* Iterate once to create two iterators in partition (#2577) @mincong-h\r\n* Wrong parameter name in Either.filterOrElse JavaDoc (#2618) @gualtierotesta\r\n* Fix Array#update(int, T) complexity (#2648) @anton0xf\r\n* more robust slideby classifier function handling (#2642) @jwbargsten\r\n* Vector.of(T element) performance improvement (#2659) @sleepytomcat\r\n", "reactions": {"url": "https://api.github.com/repos/vavr-io/vavr/releases/22254442/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/26578204", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/26578204/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/26578204/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.10.3", "id": 26578204, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTI2NTc4MjA0", "tag_name": "v0.10.3", "target_commitish": "master", "name": "Patch Release 0.10.3", "draft": false, "prerelease": false, "created_at": "2020-05-15T21:39:00Z", "published_at": "2020-05-15T22:08:10Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.10.3", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.10.3", "body": "## Info\r\n\r\nThis is a maintenance release for the 0.10.x release train.\r\n\r\n**Please find the complete list of changes [here](https://github.com/vavr-io/vavr/compare/v0.10.2...v0.10.3).**\r\n\r\n**The API Docs can be found [here](https://www.javadoc.io/doc/io.vavr/vavr/0.10.3)**\r\n\r\n## Committers\r\n\r\n**\ud83c\udf89 MANY THANKS TO ALL COMMITTERS! \ud83c\udf89**\r\n\r\n* \u2b50\ufe0f Mincong Huang ([@mincong-h](https://github.com/mincong-h))\r\n* \u2b50\ufe0f Daniel Dietrich ([@danieldietrich](https://github.com/danieldietrich))\r\n\r\n## Changes\r\n\r\n* **Bugfix:** #2583 Backport: Re-adds the automatic module name\r\n* **Improvement:** #2575 Backport \"Avoid unnecessary copy in 'ofAll()' methods\" to v0.10\r\n* **Documentation:** #2587 Bumps the copyright year to 2020\r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/19046519", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/19046519/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/19046519/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.10.2", "id": 19046519, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTE5MDQ2NTE5", "tag_name": "v0.10.2", "target_commitish": "master", "name": "Patch Release 0.10.2", "draft": false, "prerelease": false, "created_at": "2019-08-02T16:14:57Z", "published_at": "2019-08-02T16:42:41Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.10.2", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.10.2", "body": "This patch release fixes the bug of overlapping JPMS module names by removing the `Automatic-Module-Name` attributes from the MANIFEST.MF files.\r\n\r\nThe upcoming release v1.0.0 will not have `Automatic-Module-Name` attributes.\r\n\r\nThe next release v2.0.0 will have proper JPMS modules."}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/18800484", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/18800484/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/18800484/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.10.1", "id": 18800484, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTE4ODAwNDg0", "tag_name": "v0.10.1", "target_commitish": "master", "name": "Bugfix Release 0.10.1", "draft": false, "prerelease": false, "created_at": "2019-07-23T00:23:20Z", "published_at": "2019-07-23T11:18:03Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.10.1", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.10.1", "body": "## Info\r\n\r\nThis is a maintenance release for the 0.10.x release train.\r\n\r\n**Please find the complete list of changes [here](https://github.com/vavr-io/vavr/compare/v0.10.0...v0.10.1).**\r\n\r\n**The API Docs can be found [here](https://www.javadoc.io/doc/io.vavr/vavr/0.10.1)**\r\n\r\n## Committers\r\n\r\n**\ud83c\udf89 MANY THANKS TO ALL COMMITTERS! \ud83c\udf89**\r\n\r\n* \u2b50\ufe0f Daniel Dietrich ([@danieldietrich](https://github.com/danieldietrich))\r\n* \u2b50\ufe0f Theodor A. Dumitrescu ([@thadumi](https://github.com/thadumi))\r\n* \u2b50\ufe0f Bram Schuur ([@craffit](https://github.com/craffit))\r\n\r\n## Changes\r\n\r\n* **Bugfix:** #2430 Future.reduce considers executor\r\n* **Bugfix:** #2426 Fixes DistictIterator to not eat null values\r\n* **Bugfix:** #2405 Fixes patmat corner case that might produce a ClassCastException\r\n* **Bugfix:** #2403 ClassCastException during pattern matching\r\n* **Bugfix:** #2399 Fix: CharSeq implements Comparable<CharSeq>\r\n* **Improvement:** #2400 Improve performance of last() call on TreeMap\r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/18800652", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/18800652/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/18800652/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/vavr-1.0.0-alpha-3", "id": 18800652, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTE4ODAwNjUy", "tag_name": "vavr-1.0.0-alpha-3", "target_commitish": "master", "name": "Preview Release 1.0.0 alpha 3", "draft": false, "prerelease": false, "created_at": "2019-07-23T00:54:02Z", "published_at": "2019-07-23T11:54:21Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/vavr-1.0.0-alpha-3", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/vavr-1.0.0-alpha-3", "body": "## Info\r\n\r\n**Caution:** This is a preview release of the upcoming major release 1.0.0. It is highly under development and the API is subject to change. Please do not use it in production.\r\n\r\nWe are still in the process of moving the changes from the [original 1.0.0 branch](https://github.com/vavr-io/vavr/tree/v2.0.0) to [master](https://github.com/vavr-io/vavr).\r\n\r\nAdditionally there are [stashed changes](https://github.com/vavr-io/vavr/tree/stash-pre-0.10.0) that did not make it into the minor release 0.10.0, that may make it into the upcoming 1.0.0 release. This is also work in progress.\r\n\r\n**The API Docs can be found [here](https://www.javadoc.io/doc/io.vavr/vavr/1.0.0-alpha-3)** _(\ud83d\udea7 currently unavailable because https://www.javadoc.io seems to be down)_\r\n\r\n## Comitters\r\n\r\n**\ud83c\udf89 MANY THANKS TO ALL COMMITTERS! \ud83c\udf89**\r\n\r\n* \u2b50\ufe0f Daniel Dietrich ([@danieldietrich](https://github.com/danieldietrich))\r\n* \u2b50\ufe0f baant\r\n* \u2b50\ufe0f Alexandru Stana ([alexandrustana](https://github.com/alexandrustana))\r\n* \u2b50\ufe0f Mark Raynsford ([io7m](https://github.com/io7m))\r\n* \u2b50\ufe0f Theodor A. Dumitrescu ([@thadumi](https://github.com/thadumi))\r\n* \u2b50\ufe0f Juan Antonio Bre\u00f1a Moral ([jabrena](https://github.com/jabrena))\r\n* \u2b50\ufe0f Bram Schuur ([@craffit](https://github.com/craffit))\r\n* \u2b50\ufe0f Mincong Huang ([mincong-h](https://github.com/mincong-h))\r\n\r\n## Changes\r\n\r\n**Please find the complete list of changes [here](https://github.com/vavr-io/vavr/compare/v0.10.0...vavr-1.0.0-alpha-3).**"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/15075898", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/15075898/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/15075898/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.10.0", "id": 15075898, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTE1MDc1ODk4", "tag_name": "v0.10.0", "target_commitish": "master", "name": "Minor Release 0.10.0", "draft": false, "prerelease": false, "created_at": "2019-01-20T00:59:20Z", "published_at": "2019-01-20T16:51:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.10.0", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.10.0", "body": "## Info\r\n\r\nThe minor release 0.10.0 focuses on several API improvements.\r\n\r\n**Please find the complete list of changes [here](https://github.com/vavr-io/vavr/compare/v0.9.3...v0.10.0).**\r\n\r\n**The API Docs can be found [here](https://www.javadoc.io/doc/io.vavr/vavr/0.10.0)**\r\n\r\n## Comitters\r\n\r\n**\ud83c\udf89 MANY THANKS TO ALL COMMITTERS (AND THEIR PATIENCE)! \ud83c\udf89**\r\n\r\n* \u2b50\ufe0f Amy ([@amygithub](https://github.com/amygithub))\r\n* \u2b50\ufe0f Andreas Gebhardt ([@agebhar1](https://github.com/agebhar1))\r\n* \u2b50\ufe0f Audun Halland ([@audunhalland](https://github.com/audunhalland))\r\n* \u2b50\ufe0f Daniel Dietrich ([@danieldietrich](https://github.com/danieldietrich))\r\n* \u2b50\ufe0f Emmanuel Touzery ([@emmanueltouzery](https://github.com/emmanueltouzery))\r\n* \u2b50\ufe0f Erlend Hamnaberg ([@hamnis](https://github.com/hamnis))\r\n* \u2b50\ufe0f Florian Stefan ([@florian-stefan](https://github.com/florian-stefan))\r\n* \u2b50\ufe0f Grzegorz Ga\u0142\u0119zowski ([@grzesiek-galezowski](https://github.com/grzesiek-galezowski))\r\n* \u2b50\ufe0f Igor Konoplyanko ([@cauchypeano](https://github.com/cauchypeano))\r\n* \u2b50\ufe0f J. B. Rainsberger ([@jbrains](https://github.com/jbrains))\r\n* \u2b50\ufe0f James Lorenzen ([@jlorenzen](https://github.com/jlorenzen))\r\n* \u2b50\ufe0f Jia Chen ([@grievejia](https://github.com/grievejia))\r\n* \u2b50\ufe0f Julien Debon ([@Sir4ur0n](https://github.com/Sir4ur0n))\r\n* \u2b50\ufe0f N\u00e1ndor El\u0151d Fekete ([@nfekete](https://github.com/nfekete))\r\n* \u2b50\ufe0f Nataliia Privezentseva ([@nataliiaprivezentseva](https://github.com/nataliia))\r\n* \u2b50\ufe0f Maciej G\u00f3rski ([@mg6maciej](https://github.com/mg6maciej))\r\n* \u2b50\ufe0f Mathias D\u00fcsterh\u00f6ft ([@mduesterhoeft](https://github.com/mduesterhoeft))\r\n* \u2b50\ufe0f Micha\u0142 Patejko ([@miszasty93](https://github.com/miszasty93))\r\n* \u2b50\ufe0f Michael Ummels ([@ummels](https://github.com/ummels))\r\n* \u2b50\ufe0f Miko\u0142aj Fejzer ([@mfejzer](https://github.com/mfejzer))\r\n* \u2b50\ufe0f Nazarii Bardiuk ([@nbardiuk](https://github.com/nbardiuk))\r\n* \u2b50\ufe0f Pap L\u0151rinc ([@paplorinc](https://github.com/paplorinc))\r\n* \u2b50\ufe0f Pascal Schumacher ([@PascalSchumacher](https://github.com/PascalSchumacher))\r\n* \u2b50\ufe0f Peter Buckley ([@dx-pbuckley](https://github.com/dx-pbuckley))\r\n* \u2b50\ufe0f Robert Erdin ([@roberterdin](https://github.com/roberterdin))\r\n* \u2b50\ufe0f Ruslan Sennov ([@ruslansennov](https://github.com/ruslansennov))\r\n* \u2b50\ufe0f Sebastian Zarnekow ([@szarnekow](https://github.com/szarnekow))\r\n* \u2b50\ufe0f Sergey Pereverzov ([@serp92](https://github.com/serp92))\r\n* \u2b50\ufe0f Stephen Kestle ([@skestle](https://github.com/skestle))\r\n* \u2b50\ufe0f Valery ([@valery1707](https://github.com/valery1707))\r\n* \u2b50\ufe0f Victor Buldakov ([@v1ctor](https://github.com/v1ctor))\r\n\r\n_Note: A few contributions didn't made it into 0.10.0 because of backward incompatibilities._\r\n\r\n## Changes\r\n\r\nInstead of describing all changes in detail, I will provide a list and show some examples.\r\nBeside new features there were also several (internal) improvements not shown here.\r\n\r\n### Core/API\r\n\r\n![for](https://user-images.githubusercontent.com/743833/51441778-6c2cd500-1cd5-11e9-835b-337247281239.gif)\r\n\r\n* **Change (internal):** Removed internal interface io.vavr.Lambda which was on top of the (Checked)Function type hierarchy. It was not public.\r\n* **Feature:** For-comprehension supports List, Option, Future, Try\r\n* **Feature:** Tuple - append(), concat() and hash()\r\n* **Feature:** CheckedConsumer, CheckedPredicate and CheckedRunnable enhancements\r\n* **Feature:** PartialFunction now implements Function1\r\n* **Feature:** Predicates.not()\r\n* **Feature:** Value: toJavaArray(IntFunction), toTree(Function, Function)\r\n* **Deprecation (for removal):** API.Map(Tuple2)\r\n* **Deprecation (for removal):** API.LinkedMap(Tuple2)\r\n* **Deprecation (for removal):** API.SortedMap(Tuple2)\r\n* **Deprecation (for removal):** API.SortedMap(Comparator, Tuple2)\r\n* **Deprecation (for removal):** API.SortedMap(java.util.Map)\r\n* **Deprecation (for removal):** Value.toLeft()\r\n* **Deprecation (for removal):** Value.toRight()\r\n* **Deprecation (for removal):** Value.toValid()\r\n* **Deprecation (for removal):** Value.toInvalid()\r\n\r\n### Collections\r\n\r\n![for-each-with-index](https://user-images.githubusercontent.com/743833/51441984-186fbb00-1cd8-11e9-9675-f1882aba2c66.gif)\r\n\r\n* **Feature:** Traversable: forEachWithIndex, reject(Predicate)\r\n* **Feature:** Iterator/Stream: fill(int, Object)\r\n* **Feature:** Map/Multimap: reject(BiPredicate), rejectKeys(Predicate), rejectValues(Predicate), keysIterator(), valuesIterator()\r\n* **Feature:** Map/Seq: asPartialFunction()\r\n* **Feature:** Seq.rotateLeft, rotateRight, takeRight, takeRightUntil, takeRightWhile\r\n\r\n### Concurrent\r\n\r\n![future](https://user-images.githubusercontent.com/743833/51442098-7355e200-1cd9-11e9-8038-20c018a677d2.gif)\r\n\r\n* **Change:** Future now uses Executor instead of ExecutorService. The executorService() works as before if Future was initialized with an ExecutorService, otherwise it throws. User executor() instead.\r\n* **Change:** Future DEFAULT_EXECUTOR: ForkJoinPool.commonPool()\r\n* **Feature:** Future.await(long timeout, TimeUnit unit)\r\n* **Feature:** Future.isCancelled()\r\n* **Feature (experimental):** (Experimental) Future.run(Task), Future.run(Executor, Task)\r\n* **Deprecation (for removal):** Seq/Map/Set withDefault, withDefaultValue\r\n\r\n### Controls\r\n\r\n![try-fold](https://user-images.githubusercontent.com/743833/51442294-cb8de380-1cdb-11e9-9725-5c5a3f51b429.gif)\r\n\r\n* **Feature:** Either.sequence, Either.sequenceRight\r\n* **Feature:** Either.traverse, Either.traverseRight\r\n* **Feature:** Either.filterOrElse\r\n* **Feature:** Either.toValidation\r\n* **Feature:** Option.traverse\r\n* **Feature:** Option.fold\r\n* **Feature:** Try.traverse\r\n* **Feature:** Try.onFailure\r\n* **Feature:** Try.fold\r\n* **Feature:** Try.toValidation\r\n* **Feature:** Validation.fromTry\r\n* **Feature:** Validation.traverse\r\n* **Deprecation (for removal):** Either.left(), Either.right()\r\n* **Deprecation (for removal):** Either.LeftProjection, Either.RightProjection\r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/14825351", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/14825351/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/14825351/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.9.3", "id": 14825351, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTE0ODI1MzUx", "tag_name": "v0.9.3", "target_commitish": "master", "name": "Bugfix Release 0.9.3", "draft": false, "prerelease": false, "created_at": "2019-01-07T01:15:13Z", "published_at": "2019-01-07T01:28:38Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.9.3", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.9.3", "body": "## Info\r\n\r\nThe release increases stability and performance.\r\n\r\n**Please find the complete list of changes [here](https://github.com/vavr-io/vavr/compare/v0.9.2...v0.9.3).**\r\n\r\n**The API Docs can be found [here](https://www.javadoc.io/doc/io.vavr/vavr/0.9.3)**\r\n\r\n## Comitters\r\n\r\n**\ud83c\udf89 MANY THANKS TO ALL COMMITTERS THAT MADE THIS RELEASE POSSIBLE \ud83c\udf89**\r\n\r\n* \u2b50\ufe0f Andreas Gebhardt ([@agebhar1](https://github.com/agebhar1))\r\n* \u2b50\ufe0f Audun Halland ([@audunhalland](https://github.com/audunhalland))\r\n* \u2b50\ufe0f Daniel Dietrich ([@danieldietrich](https://github.com/danieldietrich))\r\n* \u2b50\ufe0f Igor Konoplyanko ([@cauchypeano](https://github.com/cauchypeano))\r\n* \u2b50\ufe0f J. B. Rainsberger ([@jbrains](https://github.com/jbrains))\r\n* \u2b50\ufe0f Jia Chen ([@grievejia](https://github.com/grievejia))\r\n* \u2b50\ufe0f N\u00e1ndor El\u0151d Fekete ([@nfekete](https://github.com/nfekete))\r\n* \u2b50\ufe0f Nataliia Privezentseva ([@nataliiaprivezentseva](https://github.com/nataliia))\r\n* \u2b50\ufe0f Ruslan Sennov ([@ruslansennov](https://github.com/ruslansennov))\r\n* \u2b50\ufe0f Sebastian Zarnekow ([@szarnekow](https://github.com/szarnekow))\r\n* \u2b50\ufe0f Stephen Kestle ([@skestle](https://github.com/skestle))\r\n* \u2b50\ufe0f Valery ([@valery1707](https://github.com/valery1707))\r\n\r\n## Bug fixes\r\n\r\n### \ud83d\udea8 LinkedHashMap duplicate entries\r\n\r\nIn Vavr 0.9.2, all `LinkedHashMap` factory methods internally did not store keys and values correctly.\r\n\r\nExample:\r\n\r\n```java\r\nvar map = LinkedHashMap(1, \"1\", 1, \"2\", 2, \"3\", 2, \"4\");\r\n\r\n// = 2 (CORRECT)\r\nmap.size();\r\n\r\n// = LinkedHashSet(1, 1, 2, 2) (WRONG)\r\n// = LinkedHashSet(1, 2) (FIXED)\r\nmap.keySet() = LinkedHashSet(1, 1, 2, 2)\r\n\r\n// = List(\"1\", \"2\", \"3\", \"4\") (WRONG)\r\n// = List(\"2\", \"4\") (FIXED)\r\nmap.values() = List(1, 2, 3, 4)\r\n```\r\n\r\nDetails can be found [here](https://github.com/vavr-io/vavr/commit/562967a4dfa51757c38a5a707b21b8aa72d55838).\r\n\r\n### \ud83d\udea8 TreeSet fell back to natural comparator after removing all elements\r\n\r\n```java\r\n// = TreeSet(2, 1)\r\nvar set1 = TreeSet.ofAll(Comparator.reverseOrder(), List(1, 1, 2, 2));\r\n\r\n// = TreeSet() has now natural comparator (WRONG)\r\n// = TreeSet() keeps reverse order (FIXED)\r\nvar set2 = set1.removeAll();\r\n\r\n// = TreeSet(1, 2) (WRONG)\r\n// = TreeSet(2, 1) (FIXED)\r\nset2.addAll(List(1, 1, 2, 2));\r\n```\r\n\r\nDetails can be found [here](https://github.com/vavr-io/vavr/commit/6179333eb308958805f760cccc2e150cfdf4bd18).\r\n\r\n### \ud83d\udea8 Stream flatMap memory consumption\r\n\r\nStream.flatMap used an inner class for iteration, with the effect of the result stream holding an unnecessary indirect reference to the head of the source stream, resulting in a \"temporary\" memory leak.\r\n\r\nHowever, when the reference to the original Stream was garbage-collected, the memory was completely freed.\r\n\r\nDetails can be found [here](https://github.com/vavr-io/vavr/commit/581675f035a8b9f434cb805cc19f6406ef351693).\r\n\r\n## Performance improvements\r\n\r\n### \ud83c\udfc1 Hash code calculation\r\n\r\nInternally, we relied on\r\n\r\n```java\r\nObjects.hash(T... varargs)\r\n```\r\n\r\nfor hashCode calculation. A call\r\n\r\n```java\r\nObjects.hash(1, 2, 3)\r\n```\r\n\r\nresults in an array creation. In order to prevent that unnecessary instance creation, we added internal methods that preserve our hash semantics.\r\n\r\n### \ud83c\udfc1 Micro-optimizations of collections\r\n\r\nWe did some micro-optimizations to\r\n\r\n* `CharSeq.ofAll(Iterable)`\r\n* `CharSeq.prependAll(Iterable)`\r\n* `Vector.ofAll(Iterable)`\r\n* `Vector.appendAll(Iterable)`\r\n* `Vector.prependAll(Iterable)`\r\n\r\nLow-level details can be found [here](https://github.com/vavr-io/vavr/commit/b080ce70342eda3393cce18817af6ab5f3793336).\r\n\r\n## New API\r\n\r\n### \ud83c\udf89 Map additions\r\n\r\nWe follow the [Semantic Versioning](\r\nhttp://semver.org) scheme. Although this release is a patch release, there are two new methods:\r\n\r\n* [Map.keyIterator()](\r\nhttps://static.javadoc.io/io.vavr/vavr/0.9.3/io/vavr/collection/Map.html#keysIterator--)\r\n* [Map.valuesIterator()](https://static.javadoc.io/io.vavr/vavr/0.9.3/io/vavr/collection/Map.html#valuesIterator--)\r\n\r\nI hope, your OSGi infrastructure does not complain about it.\r\n\r\n## Jar files\r\n\r\n### \ud83d\udce6 Separate annotation processor jar\r\n\r\nWe separated annotation `vavr-match-processor-<version>.jar` from `vavr-match-<version>.jar`.\r\n\r\nIf you want to create your own pattern matching patterns, you need to include these two dependencies now instead of only `vavr-match`.\r\n\r\n## Documentation\r\n\r\n### \ud83d\udcda Javadoc improvements\r\n\r\n* We clarified that `LinkedHashMap.put(K, V)` and `LinkedHashMap.add(T)` have a worst-case linear complexity. This is because equal elements need to be replaced while preserving their position.\r\n* Several small improvements and fixes\r\n\r\n## Other improvements\r\n\r\n* Improved interoperability with the GWT compiler\r\n* Improved Eclipse integration for Vavr _committers_"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/8651535", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/8651535/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/8651535/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.9.2", "id": 8651535, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTg2NTE1MzU=", "tag_name": "v0.9.2", "target_commitish": "master", "name": "Bugfix Release 0.9.2", "draft": false, "prerelease": false, "created_at": "2017-11-24T07:45:44Z", "published_at": "2017-11-24T21:44:42Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.9.2", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.9.2", "body": "## Contributors\r\n\r\nDaniel Dietrich\r\nErlend Hamnaberg\r\nMichael Ummels\r\nPap L\u0151rinc\r\nRobert Erdin\r\nValeriy Vyrva\r\n\r\n## Changelog\r\n\r\n### Works fine on JDK 9\r\n\r\nVavr 0.9.2 now works fine on JDK 9. The previous release 0.9.1 had an internal dependency that broke the JDK 9 build - we fixed that.\r\n\r\n**Note:** JDK 9 introduced a type inference bug that may affect Vavr's pattern matching in some cases. Please see [JDK-8039214](https://bugs.openjdk.java.net/browse/JDK-8039214).\r\n\r\n### Collections\r\n\r\n* We fixed the implementation of **Multimap.last()**. We did not override the default Traversable implementation.\r\n* We fixed a problem with the **intersection** of ordered collections that are based on RedBlackTree (such as **TreeSet**).\r\n\r\n### Concurrent\r\n\r\n* We fixed **Future.traverse(ExecutorService, Iterable, Function)**. The ExecutorService was not taken into account.\r\n\r\n### More fixes...\r\n\r\n* Beside the above, we fixed some **javadoc** typos.\r\n\r\nPlease find the **complete list of changes** [here](https://github.com/vavr-io/vavr/pulls?utf8=\u2713&q=is%3Aclosed%20is%3Apr%20milestone%3Avavr-0.9.2)."}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/7784825", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/7784825/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/7784825/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.9.1", "id": 7784825, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTc3ODQ4MjU=", "tag_name": "v0.9.1", "target_commitish": "master", "name": "Bugfix Release 0.9.1", "draft": false, "prerelease": false, "created_at": "2017-09-17T17:41:20Z", "published_at": "2017-09-17T19:59:58Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.9.1", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.9.1", "body": "## Contributors\r\n\r\nChristian Bongiorno\r\nDaniel Dietrich\r\nEmmanuel Touzery\r\nJulien Debon\r\nNazarii Bardiuk\r\nPascal Schumacher\r\nRuslan Sennov\r\n\r\n## Changelog\r\n\r\n### Concurrent operations\r\n\r\n* We fixed a bug that prevented onFailure actions to be performed when a Future has been cancelled.\r\n* There are known problems with Promise that occur under certain circumstances (see details below). Please note that we did not fix this problem in 0.9.1. We currently work on it in #2093.\r\n\r\n<details>\r\n\r\nThe main thread may be blocked forever if we use an operation that blocks on a Future returned by a Promise. We observed this behavior when we used a ForkJoinPool instead of the default CachedThreadPool.\r\n\r\nExample:\r\n\r\n```java\r\n// we choose a work-stealing thread pool\r\nExecutorService executor = java.util.concurrent.ForkJoinPool.commonPool();\r\nFuture<Object> someFuture = Future.of(executor, () -> longRunningTask());\r\n\r\n// the internal Future of a Promise might deadlock the system if we block on that Future\r\nPromise<Object> promise = Promise.make(executor);\r\nsomeFuture.onComplete(promise::complete);\r\n\r\n// the bug only shows up when calling a blocking operation, like get() or isEmpty()\r\nObject result = promise.future().get();\r\n```\r\n\r\n</details>\r\n\r\n### Numeric operations\r\n\r\n* Removed the `Traversable.min()`, `max()` overloads `TreeSet.min()` and `TreeSet.max()`\r\n* Made `Traversable.average()`, `sum()` and `product()` more accurate.\r\n\r\n<details>\r\n\r\n#### TreeSet min()/max()\r\n\r\nTreeSet implements SortedSet, which represents distinct elements that are ordered using a specific Comparator.\r\nBy default, Traversable.min() and max() calculate the minimum resp. maximum element in linear time O(n) using the natural element order.\r\nHowever, we used the TreeSet collection characteristic to calculate the min() / max() in constant time O(1).\r\n\r\nThis was wrong for two reasons:\r\n\r\n1. The Traversable API spec states that min() and max() are calculated using the natural element order. This has to be the case because of the [Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle), see examples below.\r\n2. The minimum of any non-empty collection containing double values is Double.NaN if one or more elements are NaN. But the natural Comparator of Double is defined in the way that NaN >= d for every double d.\r\n\r\nExample:\r\n\r\n```java\r\n// = TreeSet(3, 2, 1)\r\nSet<Integer> ints = TreeSet.of(Comparator.reverseOrder(), 1, 2, 3);\r\n\r\n// = 3 (before), = 1 (after)\r\nints.min();\r\n\r\n// = 1 (before), = 3 (after)\r\nints.max();\r\n\r\n// = List(1.0, NaN, 3.0)\r\nList<Integer> doubles = List.of(1.0, Double.NaN, 3.0);\r\n\r\n// = 1.0 (before), = NaN (after)\r\ndoubles.min();\r\n\r\n// = NaN (both ok, before and after this change)\r\ndoubles.max();\r\n```\r\n\r\n#### Traversable average(), sum() and product()\r\n\r\n**sum()** and **product()** operate on elements of type Number. Now we return a Number according to the input argument or fallback to double.\r\n\r\n**sum()** and **average()** now internally use an improved summation compensation algorithm that fixes problems that occur in standard Java.\r\n\r\nExample:\r\n\r\n```java\r\n// = OptionalDouble(0.0) (wrong)\r\nj.u.s.DoubleStream.of(1.0, 10e100, 2.0, -10e100).average()\r\n\r\n// = Some(0.75) (correct)\r\nList.of(1.0, 10e100, 2.0, -10e100).average()\r\n```\r\n\r\n</details>\r\n\r\n### Missing methods\r\n\r\nWe added\r\n\r\n* `Either.sequence(Iterable<? extends Either<? extends L, ? extends R>>)`\r\n* `Either.sequenceRight(Iterable<? extends Either<? extends L, ? extends R>>)`\r\n\r\n<details>\r\n\r\nExamples:\r\n\r\n```java\r\n// = Right(List(all, right)) of type Either<Seq<Integer>, Seq<String>> \r\nEither.sequence(List.of(Either.right(\"all\"), Either.right(\"right\")));\r\n\r\n// = Left(List(1, 2)) of type Either<Seq<Integer>, Seq<String>> \r\nEither.sequence(List.of(Either.left(1), Either.left(2), Either.right(\"ok\")));\r\n\r\n// = Right(List(all, right)) of type Either<Integer, Seq<String>> \r\nEither.sequenceRight(List.of(Either.right(\"all\"), Either.right(\"right\")));\r\n\r\n// = Left(1) of type Either<Integer, Seq<String>> \r\nEither.sequenceRight(List.of(Either.left(1), Either.left(2), Either.right(\"ok\")));\r\n```\r\n\r\n</details>\r\n\r\n### Type narrowing\r\n\r\nWe changed the generic bounds of these method arguments:\r\n\r\n* `Function0<R>.narrow(Function0<? extends R>)` (before: `narrow(Supplier<? extends R>)`)\r\n* `Function1<T1, R> Function1.narrow(Function1<? super T1, ? extends R>)` (before: `narrow(Function<? super T1, ? extends R>)`)\r\n* `Function2<T1, T2, R> Function2.narrow(Function2<? super T1, ? super T2, ? extends R>)` (before: `narrow(BiFunction<? super T1, ? super T2, ? extends R>)`)\r\n\r\n<details>\r\n\r\nBackground: Java is not able to do the following type assignment:\r\n\r\n```java\r\nM<? extends T> m = ...;\r\nM<T> narrowed = m; // does not work but it is correct for immutable objects.\r\n```\r\n\r\nTherefore almost all Vavr types have `narrow` methods.\r\n\r\n```java\r\nM<? extends T> m = ...;\r\nM<T> narrowed = M.narrow(m); // works as expected\r\n```\r\n\r\n</details>\r\n\r\n### GWT compatibility fixes\r\n\r\nThe following methods were annotated with `@GwtIncompatible`:\r\n\r\n* `Predicates#instanceOf(Class)`\r\n* `asJava()`, `asJava(Consumer)`, `asJavaMutable()`, `asJavaMutable(Consumer)` of `io.vavr.collection.Seq` and all its subtypes,\r\n   namely `IndexedSeq`, `LinearSeq`, `Array`, `CharSeq`, `List`, `Queue`, `Stream` and `Vector`\r\n\r\n### Documentation\r\n\r\nWe added more examples and improved the readability of the Javadoc:\r\n\r\n![javadoc](https://user-images.githubusercontent.com/743833/30524276-e540c04e-9bf0-11e7-925a-637581b41481.jpg)\r\n\r\nThanks to Stuart Marks, he was so kind to initiate an [issue](https://bugs.openjdk.java.net/browse/JDK-8187288) in order to improve the default Javadoc style.\r\n\r\nYou find the Vavr 0.9.1 API specification [here](http://javadoc.io/doc/io.vavr/vavr/0.9.1).\r\n\r\n### More fixes...\r\n\r\n* We removed internal memoization of sortBy() in order to fix an issue with lazy collections that have infinite size\r\n* We optimized collection conversion\r\n* We fixed the generics of Multimap builders\r\n* We improved Traversable.reduceLeft\r\n* We improved Iterator.dropWhile and slideBy\r\n---\r\n\r\nPlease find the **complete list of changes** [here](https://github.com/vavr-io/vavr/pulls?utf8=\u2713&q=is%3Aclosed%20is%3Apr%20milestone%3Avavr-0.9.1%20)."}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/6408368", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/6408368/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/6408368/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/v0.9.0", "id": 6408368, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTY0MDgzNjg=", "tag_name": "v0.9.0", "target_commitish": "master", "name": "Major Release 0.9", "draft": false, "prerelease": false, "created_at": "2017-05-10T22:06:31Z", "published_at": "2017-05-16T22:09:12Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/v0.9.0", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/v0.9.0", "body": "\r\n## Changes to the Base Package `io.vavr`\r\n\r\nWe removed the interfaces `Kind1` and `Kind2`. They served as bridge for the removed module `javaslang-pure`, which contained experimental algebraic extensions.\r\n\r\n### Values\r\n\r\n* We removed `getOption()` in favor of `toOption()` (which has the same semantics)\r\n* We changed the functional interface argument of `getOrElseTry(CheckedFunction0)` (was: `getOrElseTry(Try.CheckedSupplier)`)\r\n* We removed the conversion method `toStack()`\r\n* We replaced the conversion methods\r\n  * `toJavaList(Supplier)` by `toJavaList(Function)`\r\n  * `toJavaSet(Supplier)` by `toJavaSet(Function)`\r\n\r\n<details>\r\n\r\n* We added introspection methods `isAsync()` and `isLazy()` that provide information about a `Value` type at runtime\r\n* We added `getOrNull()` which returns `null` if the `Value` is empty\r\n* We added Java-like `collect()` methods\r\n* We added several conversion methods:\r\n  * `toCompletableFuture()`\r\n  * `toEither(Supplier)`\r\n  * `toEither(L)`\r\n  * `toInvalid(Supplier)`\r\n  * `toInvalid(T)`\r\n  * `toJavaArray(Class)`\r\n  * `toJavaCollection(Function)`\r\n  * `toJavaCollection(Supplier)`\r\n  * `toJavaList(Function)`\r\n  * `toJavaMap(Supplier, Function, Function \r\n  * `toJavaParallelStream()`\r\n  * `toJavaSet(Function)`\r\n  * `toLinkedMap(Function)`\r\n  * `toLinkedMap(Function, Function)`\r\n  * `toLinkedSet()`\r\n  * `toMap(Function, Function)`\r\n  * `toPriorityQueue()`\r\n  * `toPriorityQueue(Comparator)`\r\n  * `toSortedMap(Comparator, Function)`\r\n  * `toSortedMap(Comparator, Function, Function)`\r\n  * `toSortedMap(Function)`\r\n  * `toSortedMap(Function, Function)`\r\n  * `toSortedSet()`\r\n  * `toSortedSet(Comparator)`\r\n  * `toValid(Supplier)`\r\n  * `toValid(E)`\r\n  * `toValidation(Supplier)`\r\n  * `toValidation(L)`\r\n\r\n</details>\r\n\r\n### Functions\r\n\r\nWe removed the interface &lambda; (the _mother_ of all functions). It was neat but it had no practical purpose. The unicode character caused several problems with 3rd party tools, which did not handle unicode characters properly.\r\n\r\n* We renamed the interface `io.vavr.\u03bb` to `io.vavr.Lambda` and removed it from the public API.\r\n* We removed the interface `\u03bb.Memoized` from the public API.\r\n\r\n<details>\r\n\r\nWe added `PartialFunction`, which is an _enabler_ for\r\n\r\n* a more performant pattern matching implementation\r\n\r\n</details>\r\n\r\n#### Functional interfaces\r\n\r\nWith Vavr 0.9 we bundled our functions in `io.vavr`.\r\n\r\n* We moved the functional interfaces `Try.CheckedConsumer`, `Try.CheckedPredicate`, `Try.CheckedRunnable` to `io.vavr`.\r\n* We replaced the functional interface `Try.CheckedSupplier` by the existing `CheckedFunction0`.\r\n\r\n#### Exception Handling\r\n\r\n<details>\r\n\r\nWe added some methods to\r\n\r\n* uncheck an existing throwing function, e.g.<br>`CheckedFunction(x -> { throw new Error(); }).unchecked()`\r\n* lift checked functions to an `Option` return type, e.g.<br>`// = None`<br>`CheckedFunction1.lift(x -> { throw new Error(); }).apply(o);`\r\n* lift checked functions to a `Try` return type, e.g.<br>`// = Failure(Error)`<br>`CheckedFunction1.liftTry(x -> { throw new Error(); }).apply(o);`\r\n\r\n</details>\r\n\r\n#### Other Factory Methods\r\n\r\n<details>\r\n\r\n* create constant functions, e.g.<br>`Function2.constant(1).apply(what, ever); // = 1`\r\n* narrowing the generic types, e.g.\r\n\r\n```java\r\nFunction0<? extends CharSequence> f_ = () -> \"hi\";\r\nFunction0<CharSequence> f = Function0.narrow(f_);\r\n```\r\n\r\n</details>\r\n\r\n### Tuples\r\n\r\n* We renamed `transform()` to `apply()`, e.g.<br>`y = f(x1, x2, x3)` can be understood as `y = Tuple(x1, x2, x3).apply(f)`.\r\n\r\n<details>\r\n\r\nAdditions:\r\n\r\n* Tuple fields can be updated using one of the `update*` methods, e.g.<br>`Tuple(1, 2, 3).update2(0)`.\r\n* A Tuple2 can be swapped, e.g. `Tuple(1, 2).swap()`.\r\n* Tuples can be created from `java.util.Map.Entry` instances, e.g.<br>`Tuple.fromEntry(entry) // = Tuple2`\r\n* Tuples can be sequenced, e.g.<br>`Tuple.sequence1(Iterable<? extends Tuple1<? extends T1>>) // = Tuple1<Seq<T1>>`\r\n* Tuples can be narrowed, e.g.<br>`Tuple.narrow(Tuple1<? extends T1>) // = Tuple1<T1>`\r\n\r\n</details>\r\n\r\n### The API Gateway\r\n\r\nWe added `io.vavr.API` that gives direct access to most of the Vavr API without additional imports.\r\n\r\nWe are now able to start using Vavr by adding one **gateway** import. More imports can be added on demand by the IDE.\r\n\r\n#### 'Companion' Factory Methods\r\n\r\n<details>\r\n\r\n```java\r\nimport static io.vavr.API.*;\r\n```\r\n\r\nThe new static factory methods serve two things:\r\n\r\n1) They add syntactic sugar.\r\n\r\nE.g. instead of `Try.of(() -> new Error())` we now just write `Try(() -> new Error())`.\r\n\r\n2) They reflect the expected return type.\r\n\r\n```java\r\nTry<Integer>     _try    = Try(1);\r\nSuccess<Integer> success = Success(1);\r\nFailure<Integer> failure = Failure(new Error());\r\n\r\nOption<Integer> option   = Option(1);\r\nSome<Integer>   some     = Some(1);\r\nNone<Integer>   none     = None();\r\n\r\nArray<Integer>  array    = Array(1, 2, 3);\r\nList<Integer>   list     = List(1, 2, 3);\r\nStream<Integer> stream   = Stream(1, 2, 3);\r\nVector<Integer> vector   = Vector(1, 2, 3);\r\n\r\nTuple1<T>       tuple1   = Tuple(t);\r\nTuple3<T, U, V> tuple3   = Tuple(t, u, v);\r\n```\r\n\r\nE.g. `Some(1)` is expected to be `Option.Some`, not `Option`. However, type narrowing is possible.\r\n\r\n```java\r\n// types work as expected\r\nOption<CharSeqeuence> option = Some(\"\");\r\n\r\n// `str` might be null\r\nOption<CharSeqeuence> option = Option(str);\r\n\r\n// also possible, it is a Some(null)!\r\nOption<CharSeqeuence> option = Some(null);\r\n```\r\n\r\n</details>\r\n\r\n#### Uncheck Functions\r\n\r\n<details>\r\n\r\nWe are now able to _uncheck_ checked functions:\r\n\r\n```java\r\nFunction1<String, User> getUserById = CheckedFunction1.of(id -> throw new IOException()).unchecked();\r\n                                 // = CheckedFunction1.of(User::getById).unchecked();\r\n```\r\n\r\nIt is recommended to use the `API.unchecked()` shortcut instead:\r\n\r\n```java\r\nFunction1<String, User> getUserById = unchecked(id -> throw new IOException());\r\n                                 // = unchecked(User::getById);\r\n```\r\n\r\n</details>\r\n\r\n#### More Syntacic Sugar\r\n\r\n<details>\r\n\r\nWe are now able to `println` to console without having to type the `System.out` boilerplate.\r\n\r\n```java\r\nprintln(\"easy\");\r\n```\r\n\r\nRapid prototyping may require to defer implementations. We use `TODO()` for that purpose:\r\n\r\n```java\r\nvoid fancyNewAlgorithm(Arg arg) {\r\n    return TODO(\"some fancy stuff will appear soon\");\r\n}\r\n\r\nfancyNewAlgorithm(TODO(\"need to construct the `arg`\"));\r\n```\r\n\r\nThe `TODO()` calls will throw a `NotImplementedError` at runtime.\r\n\r\n</details>\r\n\r\n### Pattern Matching\r\n\r\nInternally pattern matching now uses the new `PartialFunction` interface, which gives a performance boost.\r\n\r\n#### Pattern Names\r\n\r\nWe removed the possibility to create pattern matching cases outside of the _pattern scope_. Now we always use the existing `$()` methods to _lift_ objects and functions into a _pattern context_.\r\n\r\n```java\r\n// before\r\nCase(obj, ...)          // e.g. Case(1, ...)\r\nCase(predicate, ...)    // e.g. Case(t -> true, ...)\r\n\r\n// after\r\nCase($(obj), ...)       // e.g. Case($(1), ...)\r\nCase($(predicate), ...) // e.g. Case($(t -> true), ...)\r\n```\r\n\r\nOur pattern generator `vavr-match` follows the new naming scheme and adds a `$` to all generated pattern names.\r\n\r\nPlease prefix all patterns with `$`, e.g. `$Some(...)` instead of `Some(...)`.\r\n\r\n```java\r\nimport static io.vavr.API.*;\r\nimport static io.vavr.Patterns.*;\r\n\r\n// same as `intOption.map(i -> i * 2).getOrElse(-1)`\r\nString result = Match(intOption).of(\r\n    Case($Some($()), i -> i * 2),\r\n    Case($None(), -1)\r\n);\r\n```\r\n\r\nMore details [here](https://static.javadoc.io/io.vavr/vavr/0.9.0/io/vavr/Patterns.html).\r\n\r\n#### Pre-defined Patterns\r\n\r\nAccordingly all pattern names in `io.vavr.Patterns` are now prefixed with a `$`, and\r\n\r\n* we replaced the `List()` patterns by `$Cons(...)` and `$Nil()`.\r\n* we removed the `Stream()` patterns because we need to enhance our pattern generator to express inner patterns `$Stream.Cons(...)` and `$Stream.Empty()` (API not finished).\r\n\r\nMore details [here](https://static.javadoc.io/io.vavr/vavr/0.9.0/io/vavr/Patterns.html).\r\n\r\n</details>\r\n\r\n#### Pre-defined Predicates\r\n\r\n<details>\r\n\r\nWe added the predicates:\r\n\r\n* `exists(Predicate)`\r\n* `forAll(Predicate)`\r\n* `instanceOf(Class)`\r\n* `isNotNull()`\r\n* `isNull()`\r\n\r\nMore details [here](https://static.javadoc.io/io.vavr/vavr/0.9.0/io/vavr/Predicates.html).\r\n\r\n</details>\r\n\r\n## Changes to the Base Package `io.vavr.control`\r\n\r\n### Try keeps original Exception\r\n\r\n* We removed `Try.FatalException` and `Try.NonFatalException`\r\n* Instead we _sneaky throw_ the original exception when calling `get()` (even if it is checked!)\r\n\r\nFor additions see the [Try API](https://static.javadoc.io/io.vavr/vavr/0.9.0/io/vavr/control/Try.html).\r\n\r\n## Changes to the Collections `io.vavr.collection`\r\n\r\n* We removed `AbstractIterator` from the public API\r\n* We changed the index type from `long` to `int`. That strikes many methods, like `take(int)`, `drop(int)`, `zipWithIndex()`, ...\r\n* We removed the _unsafe_ `Map.of(Object...)` factory methods which interpreted the given objects as pairs.\r\n* We added the _safe_ `Map.of(K, V, ...)` factory methods (up to 10 key/value pairs).\r\n\r\n### Java Collection Views\r\n\r\n<details>\r\n\r\nOur sequential collections, i.e. all collections that implement `Seq`, can be converted to a java.util collection view in O(1).\r\n\r\nWe provide conversion method for mutable and immutable collections. By default collections are immutable, like our persistent collections.\r\n\r\n```java\r\njava.util.List<Integer> list = Vector(1, 2, 3).asJava();\r\n```\r\n\r\nMore examples can be found [here](https://static.javadoc.io/io.vavr/vavr/0.9.0/io/vavr/collection/Seq.html#asJava--).\r\n\r\n</details>\r\n\r\n### More Collections\r\n\r\nWe completely re-implemented `Vector`.\r\n\r\n<details>\r\n\r\nWe added more collections:\r\n\r\n* `BitSet`\r\n* `PriorityQueue`\r\n* `Multimap`: `HashMultimap` and `LinkedHashMultimap`\r\n* `SortedMultimap`: `TreeMultimap`\r\n\r\nThe collections got many additions. Please check out the [API docs](https://static.javadoc.io/io.vavr/vavr/0.9.0/io/vavr/collection/Traversable.html) for further details.\r\n\r\n</details>"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/5981256", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/5981256/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/5981256/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/javaslang-v2.0.6", "id": 5981256, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTU5ODEyNTY=", "tag_name": "javaslang-v2.0.6", "target_commitish": "master", "name": "Bugfix Release 2.0.6", "draft": false, "prerelease": false, "created_at": "2017-04-04T07:52:06Z", "published_at": "2017-05-12T08:38:59Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/javaslang-v2.0.6", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/javaslang-v2.0.6", "body": "## Committers\r\n\r\n[Daniel Dietrich](https://github.com/danieldietrich)\r\n[Gregor Trefs](https://github.com/gtrefs)\r\n[Jan Ferko](https://github.com/iref)\r\n[Pap L\u0151rinc](https://github.com/paplorinc)\r\n[Przemek Weso\u0142ek](https://github.com/jest)\r\n[Ruslan Sennov](https://github.com/ruslansennov)\r\n\r\n## Changelog\r\n\r\n### Base\r\n\r\n#### #1891 Changed generic bounds of Predicates allOf(), anyOf() and noneOf()\r\n\r\n<details>\r\n\r\nWe needed to change the signatures because some Match expressions did not compile.\r\n\r\n```diff\r\n-   public static <T> Predicate<T> allOf(Predicate<? super T>... predicates) { ... }\r\n+   public static <T> Predicate<T> allOf(Predicate<T>... predicates) { ... }\r\n```\r\n\r\nInstead of\r\n\r\n```java\r\nMatch(value).of(\r\n        Case(instanceOf(Either.LeftProjection.class), false),\r\n        Case(instanceOf(Either.RightProjection.class), false),\r\n        Case(instanceOf(Future.class), false),\r\n        Case(instanceOf(Iterator.class), false),\r\n        Case(instanceOf(Validation.class), false),\r\n        Case(instanceOf(Either.class), true),\r\n        Case(instanceOf(Option.class), true),\r\n        Case(instanceOf(Try.class), true),\r\n        Case(instanceOf(Traversable.class), true)\r\n);\r\n```\r\n\r\nwe are now able to write\r\n\r\n```java\r\nMatch(value).of(\r\n        Case(anyOf(\r\n                instanceOf(Either.LeftProjection.class),\r\n                instanceOf(Either.RightProjection.class),\r\n                instanceOf(Future.class),\r\n                instanceOf(Iterator.class),\r\n                instanceOf(Validation.class)\r\n        ), false),\r\n        Case(anyOf(\r\n                instanceOf(Either.class),\r\n                instanceOf(Option.class),\r\n                instanceOf(Try.class),\r\n                instanceOf(Traversable.class)\r\n        ), true)\r\n);\r\n```\r\n\r\nThe second variant did not compile before.\r\n\r\n</details>\r\n\r\n#### #1892 Make interfaces Serializable\r\n\r\n<details>\r\n\r\nWe (unintentionally) changed the interface serializability. E.g. Option wasn't serializable any more (but the classes Some and None are). This hindered us from adding fields of interface types (like Option) to serializable classes.\r\n\r\nNow interfaces extend Serializable. We made an exception for stateful types like Future, Promise and Iterator. These interfaces still to not extend Serializable.\r\n\r\n</details>\r\n\r\n### Collections\r\n\r\n#### #1796 Fixed stackoverflow problem of List.hashCode().\r\n\r\n<details>\r\n\r\nThe hashCode() calculation for big lists now works as expected.\r\n\r\n```java\r\nList.range(0, 1_000_000)).hashCode();\r\n```\r\n\r\n**Note:** Additionally we changed the hashCode() of the empty HashArrayMappedTrie, which is the basis for HashMap and HashSet.\r\n\r\n</details>\r\n\r\n#### #1792 Fixes deadlock on concurrent class initialization\r\n\r\n<details>\r\n\r\nWe could provoke a deadlock when concurrently using Iterators and the Iterator class wasn't yet initialized by the underlying ClassLoader:\r\n\r\n```java\r\nimport javaslang.collection.AbstractIterator;\r\nimport javaslang.collection.Iterator;\r\n\r\n/**\r\n * Created by aeremeev on 25.12.16.\r\n */\r\npublic class DeadlockTest {\r\n\r\n    public static void main(String[] args) {\r\n        new Thread(Iterator::empty).start();\r\n        new A();\r\n        System.out.println(\"Success\");\r\n    }\r\n\r\n    private static class A extends AbstractIterator<Void> {\r\n        @Override\r\n        protected Void getNext() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#### #1816, #1823 HashArrayMappedTrie.equals() and LeafList.hashCode() fixed\r\n\r\n<details>\r\n\r\nThe following maps should be equal because there is no underlying order.\r\n\r\n```java\r\nfinal Map<String, Integer> map1 = HashMap.of(\"Aa\", 1, \"BB\", 2);\r\nfinal Map<String, Integer> map2 = HashMap.of(\"BB\", 2, \"Aa\", 1);\r\nassertThat(map1).isEqualTo(map2);\r\n```\r\n\r\nPlease note that we provoked a hash collision in the example above:\r\n\r\n```\r\njshell> \"Aa\".hashCode()\r\n$1 ==> 2112\r\n\r\njshell> \"BB\".hashCode()\r\n$2 ==> 2112\r\n```\r\n\r\n</details>\r\n\r\n#### #1854 LinkedHashMap.keySet() order\r\n\r\n<details>\r\n\r\nThe key set of a LinkedHashMap needs to be a linked set.\r\n\r\n```java\r\nfinal Set<Integer> keySet = LinkedHashMap.of(4, \"d\", 1, \"a\", 2, \"b\").keySet();\r\nassertThat(keySet.mkString()).isEqualTo(\"412\");\r\n```\r\n\r\n</details>\r\n\r\n#### #1858 Set.add(existing) does nothing, Map.put(existing, any) overwrites\r\n\r\n<details>\r\n\r\nThe Javaslang implementation now acts like this:\r\n\r\n| Set | ovewrites equal elements |\r\n| :------- | :------------------------ |\r\n| BitSet | no |\r\n| HashSet | no |\r\n| LinkedHashSet | no |\r\n| TreeSet | no |\r\n\r\n| Map | ovewrites (k,v) when<br>key equal, value unequal | ovewrites (k,v)  when<br>key equal, value equal | overwrites old key<br>with new key |\r\n| :------- | :-------------------------- | :------------------------ | :------------------ |\r\n| HashMap | yes | **yes** | yes |\r\n| LinkedHashMap | yes (appends) | yes (appends) | yes |\r\n| TreeMap | yes | yes | yes |\r\n\r\nThere is one anomaly **in Scala**: Despite all other Map implementations, HashMap does not update (key, value) when putting a (key, value) that is already present.\r\n\r\nEspecially this may bite the user when working with the Map interface and it is not clear which implementations is currently used (see [Liskov Substitution Principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle)).\r\n\r\nIn Javaslang, we do consistent updates along all Map implementations.\r\n\r\n</details>\r\n\r\n#### #1878 Fixes Traversable.containsAll(Iterable)\r\n\r\n<details>\r\n\r\nI can't think what came over me.\r\n\r\n```diff\r\ndefault boolean containsAll(Iterable<? extends T> elements) {\r\n-   final HashSet<T> uniqueElements = HashSet.ofAll(elements);\r\n-   return toSet().intersect(uniqueElements).size() == uniqueElements.size();\r\n+   for (T element : elements) {\r\n+       if (!contains(element)) {\r\n+           return false;\r\n+       }\r\n+   }\r\n+   return true;\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#### #1907 Fixes memory leak of grouped iterator\r\n\r\n<details>\r\n\r\nInfinite iterators can be grouped now in constant memory:\r\n\r\n```java\r\nIterator.continually(1)\r\n        .grouped(100)\r\n        .zipWithIndex()\r\n        .forEach(t -> System.out.println(\"Group \" + t._2));\r\n```\r\n\r\n</details>\r\n\r\n### Functions\r\n\r\n#### #1837 Changed memoization's computeIfAbsent to synchronized get and put\r\n\r\n<details>\r\n\r\nWe now support function value memoization in recursive calls:\r\n\r\n```java\r\nprivate static final Function2<Integer, Integer, Integer> recurrent1 = (i1, i2) -> i1 <= 0 ? i1 : Function2Test.recurrent2.apply(i1 - 1, i2) + 1;\r\nprivate static final Function2<Integer, Integer, Integer> recurrent2 = Function2Test.recurrent1.memoized();\r\n\r\n@Test\r\npublic void shouldCalculatedRecursively() {\r\n    assertThat(recurrent1.apply(11, 11)).isEqualTo(11);\r\n    assertThat(recurrent1.apply(22, 22)).isEqualTo(22);\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Property Testing\r\n\r\n#### #1700 Optimized random value generators\r\n\r\n<details>\r\n\r\nWe now internally use Iterator instead of Stream:\r\n\r\n```diff\r\nstatic <T> Gen<T> of(T seed, Function<? super T, ? extends T> next) {\r\n    Objects.requireNonNull(next, \"next is null\");\r\n-   final Iterator<T> iterator = Stream.iterate(seed, next).iterator();\r\n+   final Iterator<T> iterator = Iterator.iterate(seed, next);\r\n    return ignored -> iterator.next();\r\n}\r\n```\r\n\r\nAdditionally we rewrote\r\n\r\n* `frequency(Iterable<Tuple2<Integer, Gen<T>>> generators)`\r\n* `intersperse(Gen<T> other)`\r\n\r\n**Info:** This change contains a backward compatible API change:\r\n\r\n```diff\r\ninterface Gen<T> {\r\n-   static Gen<Character> choose(char[] characters) {\r\n+   static Gen<Character> choose(char... characters) {\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#### #1702 ArrayStoreException in Gen.choose(Iterable)\r\n\r\n<details>\r\n\r\nFor instances of generic interfaces, choose was throwing an ArrayStoreException because of different runtime types of the elements within the iterable.\r\n\r\n```diff\r\nstatic <T> Gen<T> choose(Iterable<T> values) {\r\n    ...\r\n-   final T[] array = stream.toJavaArray((Class<T>) stream.head().getClass());\r\n+   final T[] array = (T[]) iterator.toJavaArray();\r\n    ...\r\n}\r\n```\r\n\r\n</details>\r\n\r\n#### #1759 Gen.frequency filters non-positive frequencies\r\n\r\n<details>\r\n\r\nNow `Gen.frequency(Iterable)` throws an IllegalArgumentException if there are non-positive frequencies (including zero).\r\n\r\n</details>\r\n\r\n### Javadoc\r\n\r\n#### #1735 Correct prefix-delimiter-suffix in mkString() javadoc\r\n\r\n<details>\r\n\r\n```diff\r\n    /**\r\n     ...\r\n-    * This has the same effect as calling {@code mkString(delimiter, \"\", \"\")}.\r\n+    * This has the same effect as calling {@code mkString(\"\", delimiter, \"\")}.\r\n     ...\r\n     */\r\n```\r\n\r\n</details>"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/4724349", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/4724349/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/4724349/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/javaslang-v2.0.5", "id": 4724349, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQ3MjQzNDk=", "tag_name": "javaslang-v2.0.5", "target_commitish": "master", "name": "Bugfix Release 2.0.5", "draft": false, "prerelease": false, "created_at": "2016-11-22T00:10:48Z", "published_at": "2017-05-12T08:38:38Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/javaslang-v2.0.5", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/javaslang-v2.0.5", "body": "## Committers\r\n\r\n@ashrko619\r\n@danieldietrich\r\n@mduesterhoeft\r\n@paplorinc\r\n@ruslansennov\r\n\r\n## New and Noteworthy\r\n\r\n### API Additions\r\n\r\nJavaslang follows the semantic versioning scheme. In the strict sense API additions require a minor version update. However, the additions that are contained in this bugfix release are considered to be fixes, not additional features.\r\n\r\nBeside backward-compatible modifier- and override-fixes, the release includes these API additions:\r\n- `TreeMap/TreeSet.collector()` do explicitly enforce that the key/element-type is Comparable. We did this by narrowing a generic parameter. However, the previous version would have lead to a ClassCastException at runtime if the given type were not Comparable.\r\n\r\n``` java\r\ninterface javaslang.collection.Iterator<T> {\r\n    + static Iterator<BigDecimal> rangeBy(BigDecimal from, BigDecimal toExclusive, BigDecimal step)\r\n}\r\n\r\nclass javaslang.collection.TreeMap<K, V> {\r\n    ~ static <K extends Comparable<? super K>, V> Collector<Tuple2<K, V>, ArrayList<Tuple2<K, V>>, TreeMap<K, V>> collector()\r\n    + static <K, V> Collector<Tuple2<K, V>, ArrayList<Tuple2<K, V>>, TreeMap<K, V>> collector(Comparator<? super K> keyComparator)\r\n}\r\n\r\nclass javaslang.collection.TreeSet<T> {\r\n    ~ static <T extends Comparable<? super T>> Collector<T, ArrayList<T>, TreeSet<T>> collector()\r\n    + static <T> Collector<T, ArrayList<T>, TreeSet<T>> collector(Comparator<? super T> comparator)\r\n}\r\n```\r\n\r\n### Behavioral Changes\r\n- `Iterator.rangeBy/rangeClosedBy` internally now use BigDecimal instead of double to calculate the range (see #1309).\r\n- `Traversable.dropWhile/takeWhile/span` behaved incorrect. This is fixed now (see #1641).\r\n- `LinkedHashMap.values()` does now preserve insertion order (see #1656).\r\n- `Value.toCharSeq()` now returns a string representation of the contained element(s) instead of the container type (see #1685).\r\n- `Traversable.min()/max()` throw now NullPointerException in each case if a null element exists (see #1482).\r\n\r\n## List of Changes\r\n\r\n### Bugfixes\r\n\r\n**\u00abbase\u00bb**\r\n- PR #1691 (fixes #1685) Fixed toCharSeq()<br><small>&rarr; 15667be</small>\r\n\r\n**\u00abcollections\u00bb**\r\n- PR #1695 (fixes #1549) Re-worked TreeMap comparators, considering null-keys<br><small>&rarr; 2767cf</small>\r\n- PR #1692 (fixes #1482) min() max() now throw NPE on null values<br><small>&rarr; 5326c88, 7c2c906</small>\r\n- PR #1671 (fixes #1633) use a Vector as accumulator of map.traverse<br><small>&rarr; 662cdd7</small>\r\n- PR #1657 (fixes #1656) Fixes LinkedHashMap::values()<br><small>&rarr; 6466e98</small>\r\n- PR #1646 (fixes #1641) Fixes truncation bug of dropWhile and null handling of takeWhile and dropWhile<br><small>&rarr; 6b6d40e</small>\r\n- PR #1308 (fixes #1309) Iterator range maintenance<br><small>&rarr; cc48033</small>\r\n- PR #1251 (fixes #1249) Map/Set factories with comparator<br><small>&rarr; f3f8f99</small>\r\n\r\n### Improvements\r\n\r\n**\u00abcollections\u00bb**\r\n- PR #1696 (fixes #1227) Made naturalComparator() a singleton and made use of it<br><small>&rarr; 7a9cc48</small>\r\n\r\n### Documentation\r\n\r\n**\u00abcontrol\u00bb**\r\n- PR #1673 (fixes #1670) Updated javadoc of Either.map and .mapLeft<br><small>&rarr; f463f29</small>\r\n- PR #1672 (fixes #1670) javadoc of Either.map + .mapLeft<br><small>&rarr; da54383</small>\r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/4284856", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/4284856/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/4284856/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/javaslang-v2.0.4", "id": 4284856, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQyODQ4NTY=", "tag_name": "javaslang-v2.0.4", "target_commitish": "master", "name": "Bugfix Release 2.0.4", "draft": false, "prerelease": false, "created_at": "2016-10-03T01:17:27Z", "published_at": "2017-05-12T08:38:18Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/javaslang-v2.0.4", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/javaslang-v2.0.4", "body": "## Committers\r\n\r\n@danieldietrich\r\n@jorander\r\n@mvh77\r\n@paplorinc\r\n@ruslansennov\r\n\r\n## New and Noteworthy\r\n\r\n### API Additions\r\n\r\nJavaslang follows the semantic versioning scheme. In the strict sense API additions require a minor version update. However, the additions that are contained in this bugfix release are considered to be fixes, not additional features.\r\n\r\nBeside backward-compatible modifier- and override-fixes, the release includes these API additions:\r\n\r\n``` java\r\nclass javaslang.Lazy<T> {\r\n  + static <T> Lazy<T> narrow(Lazy<? extends T> lazy)\r\n}\r\n\r\nclass javaslang.collection.CharSeq {\r\n  + interface CharUnaryOperator {\r\n    char apply(char c)\r\n  }\r\n  + interface CharFunction<R> {\r\n    R apply(char c)\r\n  }\r\n}\r\n\r\nclass javaslang.control.Option<T> {\r\n  + static <T> Option<T> when(boolean condition, T value)\r\n}\r\n```\r\n\r\n### Behavioral Changes\r\n- `Option.when(boolean, Supplier)` returns `Some(null)` instead of `None` if the `Supplier` returns `null`.\r\n- `Validation.valid(null)` does return `Valid(null)` instead of throwing a `NullPointerException`.\r\n- `LinkedHashMap.replace(Tuple2, Tuple2)` replaces a pair (if exists) and preserves its position instead of appending it.\r\n- `LinkedHashSet.replace(T, T)` replaces an element (if exists) and preserves its position instead of appending it.\r\n\r\n## List of Changes\r\n\r\n### Bugfixes\r\n- PR #1269 (fixes #1272) Fixed `Option.when` in case of a nullable supplier<br><small>&rarr; 7e1e7f9, b7be4fc</small>\r\n- PR #1297 SortedSet.unzip3 overridden<br><small>&rarr; 796dfe0, c766726</small>\r\n- PR #1390 (fixes #1388) Pattern-match generator should use full class names in generated code<br><small>&rarr; 84c6f15</small>\r\n- PR #1400 (fixes #1377) Added a few methods to the public API of collections<br><small>&rarr; 3bff648</small>\r\n- PR #1419 Iterator#iterate should not call supplier function until value is really needed<br><small>&rarr; 3d76301, f369a5c</small>\r\n- PR #1420 Fix TreeMap creation from Java Map<br><small>&rarr; 9358416, 8337cc8</small>\r\n- PR #1512 (fixes #1326) Replaces AbstractMap with Maps.<br><small>&rarr; c1f4d98, baf1659</small>\r\n- PR #1586 (fixes #1585) Taking primitive types into account when converting to Java array.<br><small>&rarr; bfb7063</small>\r\n- PR #1587 NullPointer Exception could occur on equals call.<br><small>&rarr; 100cce9</small>\r\n- PR #1597 Fixes problem with null-keys in LinkedHashMap put() and remove()<br><small>&rarr; 7ea1ae4</small>\r\n- PR #1598 Fixed exception messages in Array<br><small>&rarr; 9d5ac62</small>\r\n- PR #1601 (fixes #1599) Fixes LinkedHashMap/LinkedHashSet replace() methods<br><small>&rarr; 7d7712e</small>\r\n\r\n### Improvements\r\n- PR #1242 (fixes #1235) better equals/hashcode impls<br><small>&rarr; fbfe9f9, b4c8c56</small>\r\n- PR #1247 (fixes #1243) LeafSingleton: compare hashCodes before checking equality<br><small>&rarr; 9c2fbd2</small>\r\n- PR #1350 (fixes #1345) Optimized `groupBy` operations<br><small>&rarr; 21c901b, 6d70844, 0a7e912, 0f1bf89</small>\r\n- PR #1357 makes HAMT iteration 10x faster<br><small>&rarr; 49a9aa6, e1235db, 6104935</small>\r\n- PR #1567 Optimized usage of double-check idiom<br><small>&rarr; 9868a9e</small>\r\n- PR #1571 further improvement of Lazy.get()<br><small>&rarr; 3b8171e</small>\r\n- PR #1577 `Lazy` access minor speedup<br><small>&rarr; 743cb07</small>\r\n- PR #1588 Allow Validation.valid(null)<br><small>&rarr; 5747633</small>\r\n- PR #1595 Try$NonFatal.of is not intended to be public<br><small>&rarr; 6863cff</small>\r\n- PR #1596 Re-added Traversable.hash in order to stay backward compatible<br><small>&rarr; b67699a</small>\r\n\r\n### Documentation\r\n- PR #1538 (fixes #1304) Clarifies Traversable.min()/max() javadoc.<br><small>&rarr; 465ca93</small>\r\n- PR #1541 Unify author tags<br><small>&rarr; 9b7797b, ce427b7</small>\r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/3945900", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/3945900/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/3945900/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/javaslang-v2.0.3", "id": 3945900, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTM5NDU5MDA=", "tag_name": "javaslang-v2.0.3", "target_commitish": "master", "name": "Bugfix Release 2.0.3", "draft": false, "prerelease": false, "created_at": "2016-08-22T23:48:18Z", "published_at": "2017-05-12T08:37:55Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/javaslang-v2.0.3", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/javaslang-v2.0.3", "body": "- 1dd090a Fixes escaping RejectedExecutionException in Future\r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/3916695", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/3916695/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/3916695/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/javaslang-v1.2.3", "id": 3916695, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTM5MTY2OTU=", "tag_name": "javaslang-v1.2.3", "target_commitish": "master", "name": "Bugfix Release 1.2.3", "draft": false, "prerelease": false, "created_at": "2016-08-18T13:06:38Z", "published_at": "2017-05-12T08:36:30Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/javaslang-v1.2.3", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/javaslang-v1.2.3", "body": "- Fixed #1366 \r\n"}
{"url": "https://api.github.com/repos/vavr-io/vavr/releases/2926464", "assets_url": "https://api.github.com/repos/vavr-io/vavr/releases/2926464/assets", "upload_url": "https://uploads.github.com/repos/vavr-io/vavr/releases/2926464/assets{?name,label}", "html_url": "https://github.com/vavr-io/vavr/releases/tag/javaslang-v2.0.2", "id": 2926464, "author": {"login": "danieldietrich", "id": 743833, "node_id": "MDQ6VXNlcjc0MzgzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/743833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieldietrich", "html_url": "https://github.com/danieldietrich", "followers_url": "https://api.github.com/users/danieldietrich/followers", "following_url": "https://api.github.com/users/danieldietrich/following{/other_user}", "gists_url": "https://api.github.com/users/danieldietrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieldietrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieldietrich/subscriptions", "organizations_url": "https://api.github.com/users/danieldietrich/orgs", "repos_url": "https://api.github.com/users/danieldietrich/repos", "events_url": "https://api.github.com/users/danieldietrich/events{/privacy}", "received_events_url": "https://api.github.com/users/danieldietrich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTI5MjY0NjQ=", "tag_name": "javaslang-v2.0.2", "target_commitish": "master", "name": "Maintenance Release 2.0.2", "draft": false, "prerelease": false, "created_at": "2016-03-31T16:44:22Z", "published_at": "2017-05-12T08:37:39Z", "assets": [], "tarball_url": "https://api.github.com/repos/vavr-io/vavr/tarball/javaslang-v2.0.2", "zipball_url": "https://api.github.com/repos/vavr-io/vavr/zipball/javaslang-v2.0.2", "body": "- e823c71 Fixes For2..For8-comprehension\r\n- 762ca59 Inner For-loop should not memoize.\r\n- b689ec1 Match/Case API in 2.0.1 #1246\r\n"}
