{"url": "https://api.github.com/repos/pytorch/data/releases/81096291", "assets_url": "https://api.github.com/repos/pytorch/data/releases/81096291/assets", "upload_url": "https://uploads.github.com/repos/pytorch/data/releases/81096291/assets{?name,label}", "html_url": "https://github.com/pytorch/data/releases/tag/v0.5.0", "id": 81096291, "author": {"login": "ejguan", "id": 68879799, "node_id": "MDQ6VXNlcjY4ODc5Nzk5", "avatar_url": "https://avatars.githubusercontent.com/u/68879799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejguan", "html_url": "https://github.com/ejguan", "followers_url": "https://api.github.com/users/ejguan/followers", "following_url": "https://api.github.com/users/ejguan/following{/other_user}", "gists_url": "https://api.github.com/users/ejguan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejguan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejguan/subscriptions", "organizations_url": "https://api.github.com/users/ejguan/orgs", "repos_url": "https://api.github.com/users/ejguan/repos", "events_url": "https://api.github.com/users/ejguan/events{/privacy}", "received_events_url": "https://api.github.com/users/ejguan/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDOFd21l84E1W5j", "tag_name": "v0.5.0", "target_commitish": "main", "name": "TorchData 0.5.0 Release Notes", "draft": false, "prerelease": false, "created_at": "2022-10-25T14:14:32Z", "published_at": "2022-10-27T17:08:20Z", "assets": [], "tarball_url": "https://api.github.com/repos/pytorch/data/tarball/v0.5.0", "zipball_url": "https://api.github.com/repos/pytorch/data/zipball/v0.5.0", "body": "# TorchData 0.5.0 Release Notes\r\n\r\n* Highlights\r\n* Backwards Incompatible Change\r\n* Deprecations\r\n* New Features\r\n* Improvements\r\n* Bug Fixes\r\n* Performance\r\n* Documentation\r\n* Future Plans\r\n* Beta Usage Note\r\n\r\n# Highlights\r\n\r\nWe are excited to announce the release of TorchData 0.5.0. This release is composed of about 236 commits since 0.4.1, including ones from PyTorch Core since 1.12.1, made by more than 35 contributors. We want to sincerely thank our community for continuously improving TorchData.\r\n\r\nTorchData 0.5.0 updates are focused on consolidating the `DataLoader2` and `ReadingService` APIs and benchmarking. Highlights include:\r\n* Added support to load data from more cloud storage providers, now covering AWS, Google Cloud Storage, and Azure. Detailed tutorial can be found [here](https://pytorch.org/data/0.5/tutorial.html#working-with-cloud-storage-providers) \r\n  * AWS S3 Benchmarking [result](https://github.com/pytorch/data/blob/main/benchmarks/cloud/aws_s3_results.md)\r\n* Consolidated API for `DataLoader2` and provided a few `ReadingServices`, with detailed documentation now [available here](https://pytorch.org/data/0.5/dataloader2.html) \r\n* Provided more comprehensive `DataPipe` operations, e.g., `random_split`, `repeat`, `set_length`, and `prefetch`.\r\n* Provided pre-compiled torchdata binaries for arm64 Apple Silicon\r\n\r\n# Backwards Incompatible Change\r\n\r\n## DataPipe\r\n\r\n### Changed the returned value of `MapDataPipe.shuffle` to an `IterDataPipe` (https://github.com/pytorch/pytorch/pull/83202)\r\n`IterDataPipe` is used to to preserve data order\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">MapDataPipe.shuffle</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.4.1</th><th>0.5.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> from torch.utils.data import IterDataPipe, MapDataPipe\r\n>>> from torch.utils.data.datapipes.map import SequenceWrapper\r\n>>> dp = SequenceWrapper(list(range(10))).shuffle()\r\n>>> isinstance(dp, MapDataPipe)\r\nTrue\r\n>>> isinstance(dp, IterDataPipe)\r\nFalse\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> from torch.utils.data import IterDataPipe, MapDataPipe\r\n>>> from torch.utils.data.datapipes.map import SequenceWrapper\r\n>>> dp = SequenceWrapper(list(range(10))).shuffle()\r\n>>> isinstance(dp, MapDataPipe)\r\nFalse\r\n>>> isinstance(dp, IterDataPipe)\r\nTrue\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n### `on_disk_cache` now doesn\u2019t accept generator functions for the argument of `filename_fn` (https://github.com/pytorch/data/pull/810) \r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">on_disk_cache</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.4.1</th><th>0.5.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> url_dp = IterableWrapper([\"https://path/to/filename\", ])\r\n>>> def filepath_gen_fn(url):\r\n\u2026     yield from [url + f\u201d/{i}\u201d for i in range(3)]\r\n>>> cache_dp = url_dp.on_disk_cache(filepath_fn=filepath_gen_fn)\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> url_dp = IterableWrapper([\"https://path/to/filename\", ])\r\n>>> def filepath_gen_fn(url):\r\n\u2026     yield from [url + f\u201d/{i}\u201d for i in range(3)]\r\n>>> cache_dp = url_dp.on_disk_cache(filepath_fn=filepath_gen_fn)\r\n# AssertionError\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n\r\n## DataLoader2\r\n\r\n### Imposed single iterator constraint on `DataLoader2` (https://github.com/pytorch/data/pull/700)\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">DataLoader2 with a single iterator</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.4.1</th><th>0.5.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> dl = DataLoader2(IterableWrapper(range(10)))\r\n>>> it1 = iter(dl)\r\n>>> print(next(it1))\r\n0\r\n>>> it2 = iter(dl)  # No reset here\r\n>>> print(next(it2))\r\n1\r\n>>> print(next(it1))\r\n2\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> dl = DataLoader2(IterableWrapper(range(10)))\r\n>>> it1 = iter(dl)\r\n>>> print(next(it1))\r\n0\r\n>>> it2 = iter(dl)  # DataLoader2 resets with the creation of a new iterator\r\n>>> print(next(it2))\r\n0\r\n>>> print(next(it1))\r\n# Raises exception, since it1 is no longer valid\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n### Deep copy `DataPipe` during `DataLoader2` initialization or restoration (https://github.com/pytorch/data/pull/786, https://github.com/pytorch/data/pull/833)\r\nPreviously, if a DataPipe is being passed to multiple DataLoaders, the DataPipe's state can be altered by any of those DataLoaders. In some cases, that may raise an exception due to the single iterator constraint; in other cases, some behaviors can be changed due to the adapters (e.g. shuffling) of another DataLoader.\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">Deep copy DataPipe during DataLoader2 constructor</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.4.1</th><th>0.5.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp = IterableWrapper([0, 1, 2, 3, 4])\r\n>>> dl1 = DataLoader2(dp)\r\n>>> dl2 = DataLoader2(dp)\r\n>>> for x, y in zip(dl1, dl2):\r\n\u2026     print(x, y)\r\n# RuntimeError: This iterator has been invalidated because another iterator has been created from the same IterDataPipe...\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp = IterableWrapper([0, 1, 2, 3, 4])\r\n>>> dl1 = DataLoader2(dp)\r\n>>> dl2 = DataLoader2(dp)\r\n>>> for x, y in zip(dl1, dl2):\r\n\u2026     print(x, y)\r\n0 0\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n# Deprecations\r\n\r\n## DataLoader2\r\n\r\n### Deprecated `traverse` function and `only_datapipe` argument (https://github.com/pytorch/pytorch/pull/85667) \r\nPlease use `traverse_dps` with the behavior the same as `only_datapipe=True`. (https://github.com/pytorch/data/pull/793) \r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">DataPipe traverse function</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.4.1</th><th>0.5.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp_graph = torch.utils.data.graph.traverse(datapipe, only_datapipe=False)\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp_graph = torch.utils.data.graph.traverse(datapipe, only_datapipe=False)\r\nFutureWarning: `traverse` function and only_datapipe argument will be removed after 1.13.\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n# New Features\r\n\r\n## DataPipe\r\n\r\n* Added AIStore DataPipe (https://github.com/pytorch/data/pull/545, https://github.com/pytorch/data/pull/667)\r\n* Added support for `IterDataPipe` to trace DataFrames operations (https://github.com/pytorch/pytorch/pull/71931, \r\n* Added support for `DataFrameMakerIterDataPipe` to accept `dtype_generator` to solve unserializable `dtype` (https://github.com/pytorch/data/pull/537)\r\n* Added graph snapshotting by counting number of successful yields for `IterDataPipe` (https://github.com/pytorch/pytorch/pull/79479, https://github.com/pytorch/pytorch/pull/79657) \r\n* Implemented `drop` operation for `IterDataPipe` to drop column(s) (https://github.com/pytorch/data/pull/725)\r\n* Implemented `FullSyncIterDataPipe` to synchronize distributed shards (https://github.com/pytorch/data/pull/713)\r\n* Implemented `slice` and `flatten` operations for `IterDataPipe` (https://github.com/pytorch/data/pull/730) \r\n* Implemented `repeat` operation for `IterDataPipe` (https://github.com/pytorch/data/pull/748) \r\n* Added `LengthSetterIterDataPipe` (https://github.com/pytorch/data/pull/747) \r\n* Added `RandomSplitter` (without buffer) (https://github.com/pytorch/data/pull/724) \r\n* Added `padden_tokens` to `max_token_bucketize` to bucketize samples based on total padded token length (https://github.com/pytorch/data/pull/789) \r\n* Implemented thread based `PrefetcherIterDataPipe` (https://github.com/pytorch/data/pull/770, https://github.com/pytorch/data/pull/818, https://github.com/pytorch/data/pull/826, https://github.com/pytorch/data/pull/842) \r\n\r\n## DataLoader2\r\n\r\n* Added `CacheTimeout` `Adapter` to redefine cache timeout of the `DataPipe` graph (https://github.com/pytorch/data/pull/571)\r\n* Added `DistribtuedReadingService` to support uneven data sharding (https://github.com/pytorch/data/pull/727)\r\n* Added `PrototypeMultiProcessingReadingService` \r\n  * Added prefetching (https://github.com/pytorch/data/pull/826) \r\n  * Fixed process termination (https://github.com/pytorch/data/pull/837)\r\n  * Enabled deterministic training in distributed/non-distributed environment (https://github.com/pytorch/data/pull/827) \r\n  * Handled empty queue exception properly (https://github.com/pytorch/data/pull/785) \r\n\r\n## Releng\r\n\r\n* Provided pre-compiled torchdata binaries for arm64 Apple Silicon  (https://github.com/pytorch/data/pull/692)\r\n\r\n# Improvements\r\n\r\n## DataPipe\r\n\r\n* Fixed error message coming from singler iterator constraint (https://github.com/pytorch/pytorch/pull/79547) \r\n* Enabled profiler record context in `__next__` for `IterDataPipe` (https://github.com/pytorch/pytorch/pull/79757) \r\n* Raised warning for unpickable local function (#547) (https://github.com/pytorch/pytorch/pull/80232, https://github.com/pytorch/data/pull/547)\r\n* Cleaned up opened streams on the best effort basis (https://github.com/pytorch/data/pull/560, https://github.com/pytorch/pytorch/pull/78952) \r\n* Used streaming reading mode for unseekable streams in `TarArchiveLoader` (https://github.com/pytorch/data/pull/653) \r\nImproved GDrive 'content-disposition' error message (https://github.com/pytorch/data/pull/654)\r\n* Added `as_tuple` argument for CSVParserIterDataPipe` to convert output from list to tuple (https://github.com/pytorch/data/pull/646)\r\n* Raised Error when `HTTPReader` get 404 Response (#160) (https://github.com/pytorch/data/pull/569)\r\n* Added default no-op behavior for `flatmap` (https://github.com/pytorch/data/pull/749)\r\n* Added support to validate `input_col` with the provided map function for `DataPipe` (https://github.com/pytorch/pytorch/pull/80267, https://github.com/pytorch/data/pull/755, https://github.com/pytorch/pytorch/pull/84279) \r\n* Made `ShufflerIterDataPipe` support snapshotting ([#83535](https://github.com/pytorch/pytorch/pull/83535))\r\n* Unified implementations between `in_batch_shuffle` with `shuffle` for `IterDataPipe` (https://github.com/pytorch/data/pull/745)\r\n* Made `IterDataPipe.to_map_datapipe` loading data lazily (https://github.com/pytorch/data/pull/765) \r\n* Added `kwargs` to open files for `FSSpecFileLister` and `FSSpecSaver` (https://github.com/pytorch/data/pull/804) \r\n* Added missing functional name for `FileLister` ([#86497](https://github.com/pytorch/pytorch/pull/86497))\r\n\r\n## DataLoader\r\n\r\n* Controlled shuffle option to all `DataPipes` with `set_shuffle` API https://github.com/pytorch/pytorch/pull/83741) \r\n* Made distributed process group lazily initialized & share seed via the process group (https://github.com/pytorch/pytorch/pull/85279) \r\n\r\n## DataLoader2\r\n\r\n* Improved graph traverse function\r\n  * Added support for unhashable `DataPipe` (https://github.com/pytorch/pytorch/pull/80509, https://github.com/pytorch/data/pull/559)\r\n  * Added support for all python collection objects (https://github.com/pytorch/pytorch/pull/84079, https://github.com/pytorch/data/pull/773)\r\n* Ensured `finalize` and `finalize_iteration` are called during shutdown or exception (https://github.com/pytorch/data/pull/846) \r\n\r\n## Releng\r\n\r\n* Enabled conda release to support GLIBC_2.27 (https://github.com/pytorch/data/pull/859)\r\n\r\n# Bug Fixes\r\n\r\n## DataPipe\r\n\r\n* Fixed error for static typing (https://github.com/pytorch/data/pull/572, https://github.com/pytorch/data/pull/645, https://github.com/pytorch/data/pull/651, https://github.com/pytorch/pytorch/pull/81275, https://github.com/pytorch/data/pull/758) \r\n* Fixed `fork` and `unzip` operations for the case of a single child (https://github.com/pytorch/pytorch/pull/81502) \r\n* Corrected the type of exception that is being raised by `ShufflerMapDataPipe` (https://github.com/pytorch/pytorch/pull/82666) \r\n* Fixed buffer overflow for `unzip` when `columns_to_skip` is specified (https://github.com/pytorch/data/pull/658) \r\n* Fixed `TarArchiveLoader` to skip `open` for opened TarFile stream (https://github.com/pytorch/data/pull/679) \r\n* Fixed mishandling of exception message in `IterDataPipe` (https://github.com/pytorch/pytorch/pull/84676) \r\n* Fixed interface generation in setup.py ([#87081](https://github.com/pytorch/pytorch/pull/87081))\r\n\r\n# Performance\r\n\r\n## DataLoader2\r\n\r\n* Added benchmarking for `DataLoader2`\r\n  * Added AWS cloud configurations (https://github.com/pytorch/data/pull/680)\r\n  * Added benchmark from torchvision training references (https://github.com/pytorch/data/pull/714) \r\n\r\n# Documentation\r\n\r\n## DataPipe\r\n\r\n* Added examples for data loading with `DataPipe`\r\n  * Read Criteo TSV and Parquet files and apply TorchArrow operations (https://github.com/pytorch/data/pull/561) \r\n  * Read caltech256 and coco with `AIStoreDataPipe` (https://github.com/pytorch/data/pull/582)\r\n  * Read from tigergraph database (https://github.com/pytorch/data/pull/783) \r\n* Improved docstring for `DataPipe`\r\n  * `DataPipe` converters (https://github.com/pytorch/data/pull/710) \r\n  * `S3` DataPipe (https://github.com/pytorch/data/pull/784) \r\n  * `FileOpenerIterDataPipe` (https://github.com/pytorch/pytorch/pull/81407) \r\n  * `buffer_size` for `MaxTokenBucketizer` (https://github.com/pytorch/data/pull/834) \r\n  * `Prefetcher` (https://github.com/pytorch/data/pull/835)\r\n* Added tutorial to load from Cloud Storage Provider including AWS S3, Google Cloud Platform and Azure Blob Storage (https://github.com/pytorch/data/pull/812, https://github.com/pytorch/data/pull/836) \r\n* Improved tutorial\r\n  * Fixed tutorial for newline on Windows in `generate_csv` (https://github.com/pytorch/data/pull/675) \r\n  * Improved note on shuffling behavior (https://github.com/pytorch/data/pull/688) \r\n  * Fixed tutorial about shuffing before sharding (https://github.com/pytorch/data/pull/715)\r\n  * Added `random_split` example (https://github.com/pytorch/data/pull/843) \r\n* Simplified long type names for online doc (https://github.com/pytorch/data/pull/838) \r\n\r\n## DataLoader2\r\n\r\n* Improved docstring for `DataLoader2` (https://github.com/pytorch/data/pull/581, https://github.com/pytorch/data/pull/817)\r\n* Added training examples using `DataLoader2`, `ReadingService` and `DataPipe` (https://github.com/pytorch/data/pull/563, https://github.com/pytorch/data/pull/664, https://github.com/pytorch/data/pull/670, https://github.com/pytorch/data/pull/787) \r\n\r\n## Releng\r\n\r\n* Added contribution guide for third-party library (https://github.com/pytorch/data/pull/663) \r\n\r\n# Future Plans\r\n\r\nWe will continue benchmarking over datasets on local disk and cloud storage using TorchData. And, we will continue making `DataLoader2` and related `ReadingService` more stable and provide more features like snapshotting the data pipeline and restoring it from the serialized state. Stay tuned and welcome any feedback.\r\n\r\n# Beta Usage Note\r\n\r\nThis library is currently in the Beta stage and currently does not have a stable release. The API may change based on user feedback or performance. We are committed to bring this library to stable release, but future changes may not be completely backward compatible. If you install from source or use the nightly version of this library, use it along with the PyTorch nightly binaries. If you have suggestions on the API or use cases you'd like to be covered, please open a GitHub issue. We'd love to hear thoughts and feedback.", "reactions": {"url": "https://api.github.com/repos/pytorch/data/releases/81096291/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}}
{"url": "https://api.github.com/repos/pytorch/data/releases/73787421", "assets_url": "https://api.github.com/repos/pytorch/data/releases/73787421/assets", "upload_url": "https://uploads.github.com/repos/pytorch/data/releases/73787421/assets{?name,label}", "html_url": "https://github.com/pytorch/data/releases/tag/v0.4.1", "id": 73787421, "author": {"login": "ejguan", "id": 68879799, "node_id": "MDQ6VXNlcjY4ODc5Nzk5", "avatar_url": "https://avatars.githubusercontent.com/u/68879799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejguan", "html_url": "https://github.com/ejguan", "followers_url": "https://api.github.com/users/ejguan/followers", "following_url": "https://api.github.com/users/ejguan/following{/other_user}", "gists_url": "https://api.github.com/users/ejguan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejguan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejguan/subscriptions", "organizations_url": "https://api.github.com/users/ejguan/orgs", "repos_url": "https://api.github.com/users/ejguan/repos", "events_url": "https://api.github.com/users/ejguan/events{/privacy}", "received_events_url": "https://api.github.com/users/ejguan/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDOFd21l84EZegd", "tag_name": "v0.4.1", "target_commitish": "main", "name": "TorchData 0.4.1 Beta Release, small bug fix release", "draft": false, "prerelease": false, "created_at": "2022-08-05T20:18:29Z", "published_at": "2022-08-05T20:47:37Z", "assets": [], "tarball_url": "https://api.github.com/repos/pytorch/data/tarball/v0.4.1", "zipball_url": "https://api.github.com/repos/pytorch/data/zipball/v0.4.1", "body": "# TorchData 0.4.1 Release Notes\r\n\r\n# Bug fixes\r\n- Fixed `DataPipe` working with `DataLoader` in the distributed environment (https://github.com/pytorch/pytorch/pull/80348, https://github.com/pytorch/pytorch/pull/81071, https://github.com/pytorch/pytorch/pull/81071)\r\n\r\n# Documentation\r\n- Updated TorchData tutorial (#675, #688, #715)\r\n\r\n# Releng\r\n- Provided pre-compiled `torchdata` binaries for arm64 Apple Silicon (#692)\r\n  - Python [3.8~3.10]", "reactions": {"url": "https://api.github.com/repos/pytorch/data/releases/73787421/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}}
{"url": "https://api.github.com/repos/pytorch/data/releases/69541557", "assets_url": "https://api.github.com/repos/pytorch/data/releases/69541557/assets", "upload_url": "https://uploads.github.com/repos/pytorch/data/releases/69541557/assets{?name,label}", "html_url": "https://github.com/pytorch/data/releases/tag/v0.4.0", "id": 69541557, "author": {"login": "ejguan", "id": 68879799, "node_id": "MDQ6VXNlcjY4ODc5Nzk5", "avatar_url": "https://avatars.githubusercontent.com/u/68879799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejguan", "html_url": "https://github.com/ejguan", "followers_url": "https://api.github.com/users/ejguan/followers", "following_url": "https://api.github.com/users/ejguan/following{/other_user}", "gists_url": "https://api.github.com/users/ejguan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejguan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejguan/subscriptions", "organizations_url": "https://api.github.com/users/ejguan/orgs", "repos_url": "https://api.github.com/users/ejguan/repos", "events_url": "https://api.github.com/users/ejguan/events{/privacy}", "received_events_url": "https://api.github.com/users/ejguan/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDOFd21l84EJR61", "tag_name": "v0.4.0", "target_commitish": "main", "name": "TorchData 0.4.0 Beta Release", "draft": false, "prerelease": false, "created_at": "2022-06-28T17:26:47Z", "published_at": "2022-06-28T18:30:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/pytorch/data/tarball/v0.4.0", "zipball_url": "https://api.github.com/repos/pytorch/data/zipball/v0.4.0", "body": "# TorchData 0.4.0 Release Notes\r\n\r\n* Highlights\r\n* Backwards Incompatible Change\r\n* Deprecations\r\n* New Features\r\n* Improvements\r\n* Performance\r\n* Documentation\r\n* Future Plans\r\n* Beta Usage Note\r\n\r\n# Highlights\r\n\r\nWe are excited to announce the release of TorchData 0.4.0. This release is composed of about 120 commits since 0.3.0, made by 23 contributors. We want to sincerely thank our community for continuously improving TorchData.\r\n\r\nTorchData 0.4.0 updates are focused on consolidating the `DataPipe` APIs and supporting more remote file systems. Highlights include:\r\n\r\n* DataPipe graph is now backward compatible with `DataLoader` regarding dynamic sharding and shuffle determinism in single-process, multiprocessing, and distributed environments. Please check the tutorial [here](https://pytorch.org/data/0.4.0/tutorial.html#working-with-dataloader).\r\n* [`AWSSDK`](https://github.com/aws/aws-sdk-cpp) is integrated to support listing/loading files from AWS S3.\r\n* Adding support to read from `TFRecord` and Hugging Face Hub.\r\n* `DataLoader2` became available in prototype mode. For more details, please check our [future plans](#Future-Plans).\r\n\r\n# Backwards Incompatible Change\r\n\r\n## DataPipe\r\n\r\n### Updated `Multiplexer` (functional API `mux`) to stop merging multiple `DataPipes` whenever the shortest one is exhausted (https://github.com/pytorch/pytorch/pull/77145)\r\nPlease use `MultiplexerLongest` (functional API `mux_longgest`) to achieve the previous functionality.\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <tr><th>0.3.0</th><th>0.4.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp1 = IterableWrapper(range(3))\r\n>>> dp2 = IterableWrapper(range(10, 15))\r\n>>> dp3 = IterableWrapper(range(20, 25))\r\n>>> output_dp = dp1.mux(dp2, dp3)\r\n>>> list(output_dp)\r\n[0, 10, 20, 1, 11, 21, 2, 12, 22, 3, 13, 23, 4, 14, 24]\r\n>>> len(output_dp)\r\n13\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp1 = IterableWrapper(range(3))\r\n>>> dp2 = IterableWrapper(range(10, 15))\r\n>>> dp3 = IterableWrapper(range(20, 25))\r\n>>> output_dp = dp1.mux(dp2, dp3)\r\n>>> list(output_dp)\r\n[0, 10, 20, 1, 11, 21, 2, 12, 22]\r\n>>> len(output_dp)\r\n9\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n### Enforcing single valid iterator for `IterDataPipes` w/wo multiple outputs https://github.com/pytorch/pytorch/pull/70479, (https://github.com/pytorch/pytorch/pull/75995)\r\nIf you need to reference the same `IterDataPipe` multiple times, please apply `.fork()` on the `IterDataPipe` instance.\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">IterDataPipe with a single output</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.3.0</th><th>0.4.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> source_dp = IterableWrapper(range(10))\r\n>>> it1 = iter(source_dp)\r\n>>> list(it1)\r\n[0, 1, ..., 9]\r\n>>> it1 = iter(source_dp)\r\n>>> next(it1)\r\n0\r\n>>> it2 = iter(source_dp)\r\n>>> next(it2)\r\n0\r\n>>> next(it1)\r\n1\r\n# Multiple references of DataPipe\r\n>>> source_dp = IterableWrapper(range(10))\r\n>>> zip_dp = source_dp.zip(source_dp)\r\n>>> list(zip_dp)\r\n[(0, 0), ..., (9, 9)]\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> source_dp = IterableWrapper(range(10))\r\n>>> it1 = iter(source_dp)\r\n>>> list(it1)\r\n[0, 1, ..., 9]\r\n>>> it1 = iter(source_dp)  # This doesn't raise any warning or error\r\n>>> next(it1)\r\n0\r\n>>> it2 = iter(source_dp)\r\n>>> next(it2)  # Invalidates `it1`\r\n0\r\n>>> next(it1)\r\nRuntimeError: This iterator has been invalidated because another iterator has been created from the same IterDataPipe: IterableWrapperIterDataPipe(deepcopy=True, iterable=range(0, 10))\r\nThis may be caused multiple references to the same IterDataPipe. We recommend using `.fork()` if that is necessary.\r\nFor feedback regarding this single iterator per IterDataPipe constraint, feel free to comment on this issue: https://github.com/pytorch/data/issues/45.\r\n# Multiple references of DataPipe\r\n>>> source_dp = IterableWrapper(range(10))\r\n>>> zip_dp = source_dp.zip(source_dp)\r\n>>> list(zip_dp)\r\nRuntimeError: This iterator has been invalidated because another iterator has been createdfrom the same IterDataPipe: IterableWrapperIterDataPipe(deepcopy=True, iterable=range(0, 10))\r\nThis may be caused multiple references to the same IterDataPipe. We recommend using `.fork()` if that is necessary.\r\nFor feedback regarding this single iterator per IterDataPipe constraint, feel free to comment on this issue: https://github.com/pytorch/data/issues/45.\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <thead>\r\n      <tr>\r\n        <th colspan=\"2\">IterDataPipe with multiple outputs</th>\r\n      </tr>\r\n    </thead>\r\n    <tr><th>0.3.0</th><th>0.4.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> source_dp = IterableWrapper(range(10))\r\n>>> cdp1, cdp2 = source_dp.fork(num_instances=2)\r\n>>> it1, it2 = iter(cdp1), iter(cdp2)\r\n>>> list(it1)\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n>>> list(it2)\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n>>> it1, it2 = iter(cdp1), iter(cdp2)\r\n>>> it3 = iter(cdp1)\r\n# Basically share the same reference as `it1`\r\n# doesn't reset because `cdp1` hasn't been read since reset\r\n>>> next(it1)\r\n0\r\n>>> next(it2)\r\n0\r\n>>> next(it3)\r\n1\r\n# The next line resets all ChildDataPipe\r\n# because `cdp2` has started reading\r\n>>> it4 = iter(cdp2)\r\n>>> next(it3)\r\n0\r\n>>> list(it4)\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> source_dp = IterableWrapper(range(10))\r\n>>> cdp1, cdp2 = source_dp.fork(num_instances=2)\r\n>>> it1, it2 = iter(cdp1), iter(cdp2)\r\n>>> list(it1)\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n>>> list(it2)\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n>>> it1, it2 = iter(cdp1), iter(cdp2)\r\n>>> it3 = iter(cdp1)  # This invalidates `it1` and `it2`\r\n>>> next(it1)\r\nRuntimeError: This iterator has been invalidated, because a new iterator has been created from one of the ChildDataPipes of _ForkerIterDataPipe(buffer_size=1000, num_instances=2).\r\nFor feedback regarding this single iterator per IterDataPipe constraint, feel free to comment on this issue: https://github.com/pytorch/data/issues/45.\r\n>>> next(it2)\r\nRuntimeError: This iterator has been invalidated, because a new iterator has been created from one of the ChildDataPipes of _ForkerIterDataPipe(buffer_size=1000, num_instances=2).\r\nFor feedback regarding this single iterator per IterDataPipe constraint, feel free to comment on this issue: https://github.com/pytorch/data/issues/45.\r\n>>> next(it3)\r\n0\r\n# The next line should not invalidate anything, as there was no new iterator created\r\n# for `cdp2` after `it2` was invalidated\r\n>>> it4 = iter(cdp2)\r\n>>> next(it3)\r\n1\r\n>>> list(it4)\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n# Deprecations\r\n\r\n## DataPipe\r\n\r\n### Deprecated functional APIs of `open_file_by_fsspec` and `open_file_by_iopath` for `IterDataPipe` (https://github.com/pytorch/pytorch/pull/78970, https://github.com/pytorch/pytorch/pull/79302)\r\nPlease use `open_files_by_fsspec` and `open_files_by_iopath`\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <tr><th>0.3.0</th><th>0.4.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp = IterableWrapper([file_path, ])\r\n>>> dp = dp.open_file_by_fsspec()  # No Warning\r\n>>> dp = IterableWrapper([file_path, ])\r\n>>> dp = dp.open_file_by_iopath()  # No Warning\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp = IterableWrapper([file_path, ])\r\n>>> dp = dp.open_file_by_fsspec()\r\nFutureWarning: `FSSpecFileOpener()`'s functional API `.open_file_by_fsspec()` is deprecated since 0.4.0 and will be removed in 0.6.0.\r\nSee https://github.com/pytorch/data/issues/163 for details.\r\nPlease use `.open_files_by_fsspec()` instead.\r\n>>> dp = IterableWrapper([file_path, ])\r\n>>> dp = dp.open_file_by_iopath()\r\nFutureWarning: `IoPathFileOpener()`'s functional API `.open_file_by_iopath()` is deprecated since 0.4.0 and will be removed in 0.6.0.\r\nSee https://github.com/pytorch/data/issues/163 for details.\r\nPlease use `.open_files_by_iopath()` instead.\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n### Argument `drop_empty_batches` of `Filter` (functional API `filter`) is deprecated and going to be removed in the future release (https://github.com/pytorch/pytorch/pull/76060)\r\n\r\n<p align=\"center\">\r\n  <table align=\"center\">\r\n    <tr><th>0.3.0</th><th>0.4.0</th></tr>\r\n    <tr valign=\"top\">\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp = IterableWrapper([(1, 1), (2, 2), (3, 3)])\r\n>>> dp = dp.filter(lambda x: x[0] > 1, drop_empty_batches=True)\r\n      </pre></sub></td>\r\n      <td><sub><pre lang=\"python\">\r\n>>> dp = IterableWrapper([(1, 1), (2, 2), (3, 3)])\r\n>>> dp = dp.filter(lambda x: x[0] > 1, drop_empty_batches=True)\r\nFutureWarning: The argument `drop_empty_batches` of `FilterIterDataPipe()` is deprecated since 1.12 and will be removed in 1.14.\r\nSee https://github.com/pytorch/data/issues/163 for details.\r\n      </pre></sub></td>\r\n    </tr>\r\n  </table>\r\n</p>\r\n\r\n# New Features\r\n\r\n## DataPipe\r\n\r\n* Added utility to visualize `DataPipe` graphs (https://github.com/pytorch/data/pull/330)\r\n\r\n### IterDataPipe\r\n\r\n* Added `Bz2FileLoader` with functional API of `load_from_bz2` (https://github.com/pytorch/data/pull/312)\r\n* Added `BatchMapper` (functional API: `map_batches`) and `FlatMapper` (functional API: `flat_map`) (https://github.com/pytorch/data/pull/359)\r\n* Added support for WebDataset-style archives (https://github.com/pytorch/data/pull/367)\r\n* Added `MultiplexerLongest` with functional API of `mux_longest` (https://github.com/pytorch/data/pull/372)\r\n* Add `ZipperLongest` with functional API of `zip_longest` (https://github.com/pytorch/data/pull/373)\r\n* Added `MaxTokenBucketizer` with functional API of `max_token_bucketize` (https://github.com/pytorch/data/pull/283)\r\n* Added `S3FileLister` (functional API: `list_files_by_s3`) and `S3FileLoader` (functional API: `load_files_by_s3`) integrated with the native AWSSDK (https://github.com/pytorch/data/pull/165)\r\n* Added `HuggingFaceHubReader` (https://github.com/pytorch/data/pull/490)\r\n* Added `TFRecordLoader` with functional API of `load_from_tfrecord` (https://github.com/pytorch/data/pull/308)\r\n\r\n### MapDataPipe\r\n\r\n* Added `UnZipper` with functional API of `unzip` (https://github.com/pytorch/data/pull/325)\r\n* Added `MapToIterConverter` with functional API of `to_iter_datapipe` (https://github.com/pytorch/data/pull/327)\r\n* Added `InMemoryCacheHolder` with functional API of `in_memory_cache` (https://github.com/pytorch/data/pull/328)\r\n\r\n## Releng\r\n\r\n* Added nightly releases for TorchData. Users should be able to install nightly TorchData via\r\n    * `pip install \u2013pre torchdata -f https://download.pytorch.org/whl/nightly/cpu`\r\n    * `conda install -c pytorch-nightly torchdata`\r\n* Added support of AWSSDK enabled `DataPipes`. See: [README](https://github.com/pytorch/data/blob/main/torchdata/datapipes/iter/load/README.md) \r\n    * AWSSDK was pre-compiled and assembled in TorchData for both nightly and 0.4.0 releases\r\n\r\n# Improvements\r\n\r\n## DataPipe\r\n\r\n* Added optional `encoding` argument to `FileOpener` (https://github.com/pytorch/pytorch/pull/72715)\r\n* Renamed `BucketBatcher` argument to avoid name collision (https://github.com/pytorch/data/pull/304)\r\n* Removed default parameter of `ShufflerIterDataPipe` (https://github.com/pytorch/pytorch/pull/74370)\r\n* Made profiler wrapper can delegating function calls to `DataPipe` iterator (https://github.com/pytorch/pytorch/pull/75275)\r\n* Added `input_col` argument to `flatmap` for applying `fn` to the specific column(s) (https://github.com/pytorch/data/pull/363)\r\n* Improved debug message when exceptions are raised within `IterDataPipe` (https://github.com/pytorch/pytorch/pull/75618)\r\n* Improved debug message when argument is a tuple/list of `DataPipes` (https://github.com/pytorch/pytorch/pull/76134)\r\n* Add functional API to `StreamReader` (functional API: `open_files`) and `FileOpener` (functional API: `read_from_stream`) (https://github.com/pytorch/pytorch/pull/76233)\r\n* Enabled graph traversal for `MapDataPipe` (https://github.com/pytorch/pytorch/pull/74851)\r\n* Added `input_col` argument to `filter` for applying `filter_fn` to the specific column(s) (https://github.com/pytorch/pytorch/pull/76060)\r\n* Added functional APIs for `OnlineReaders` (https://github.com/pytorch/data/pull/369)\r\n    * `HTTPReaderIterDataPipe`: `read_from_http`\r\n    * `GDriveReaderDataPipe`: `read_from_gdrive`\r\n    * `OnlineReaderIterDataPipe`: `read_from_remote`\r\n* Cleared buffer for `DataPipe` during `__del__` (https://github.com/pytorch/pytorch/pull/76345)\r\n* Overrode wrong python https proxy on Windows (https://github.com/pytorch/data/pull/371)\r\n* Exposed functional API of 'to_map_datapipe' from `IterDataPipe`'s pyi interface (https://github.com/pytorch/data/pull/326)\r\n* Moved buffer for `IterDataPipe` from iterator to instance (self) (https://github.com/pytorch/data/pull/388)\r\n* Improved `DataPipe` serialization:\r\n    * Enabled serialization of `ForkerIterDataPipe` (https://github.com/pytorch/pytorch/pull/73118)\r\n    * Fixed issue with `DataPipe` serialization with dill (https://github.com/pytorch/pytorch/pull/72896)\r\n    * Applied special serialization when dill is installed (https://github.com/pytorch/pytorch/pull/74958)\r\n    * Applied dill serialization for `demux` and added cache to graph traverse (https://github.com/pytorch/pytorch/pull/75034)\r\n    * Revamp serialization logic of `DataPipes` (https://github.com/pytorch/pytorch/pull/74984)\r\n    * Prevented automatic reset after state is restored (https://github.com/pytorch/pytorch/pull/77774)\r\n* Moved `IterDataPipe` buffers from __iter__ to instance (self) ([#76999](https://github.com/pytorch/pytorch/pull/76999))\r\n* Refactored buffer of `Multiplexer` from `__iter__` to instance (self) (https://github.com/pytorch/pytorch/pull/77775)\r\n* Made `GDriveReader` handling Virus Scan Warning (https://github.com/pytorch/data/pull/442)\r\n* Added  `**kwargs` arguments to `HttpReader` to specify extra parameters for HTTP requests (https://github.com/pytorch/data/pull/392)\r\n* Updated `FSSpecFileLister` and `IoPathFileLister` to support multiple root paths and updated `FSSpecFileLister` to support S3 urls (https://github.com/pytorch/data/pull/383)\r\n* Fixed racing condition issue with writing files in multiprocessing\r\n    * Added `filelock` to `IoPathSaver` to prevent racing condition (https://github.com/pytorch/data/pull/413)\r\n    * Added lock mechanism to prevent `on_disk_cache` downloading twice https://github.com/pytorch/data/pull/409)\r\n    * Add instructions about ImportError for portalocker (https://github.com/pytorch/data/pull/506)\r\n* Added a 's' to the functional names of open/list `DataPipes` (https://github.com/pytorch/data/pull/479)\r\n* Added `list_file` functional API to `FSSpecFileLister` and `IoPathFileLister` (https://github.com/pytorch/data/pull/463)\r\n* Added `list_files` functional API to `FileLister` (https://github.com/pytorch/pytorch/pull/78419)\r\n* Improved FSSpec `DataPipes` to accept extra keyword arguments (https://github.com/pytorch/data/pull/495) \r\n* Pass through `kwargs` to `json.loads` call in JsonParse (https://github.com/pytorch/data/pull/518)\r\n\r\n## DataLoader\r\n\r\n* Added ability to use `dill` to pass `DataPipes` in multiprocessing (https://github.com/pytorch/pytorch/pull/77288))\r\n* `DataLoader` automatically apply sharding to `DataPipe` graph in single-process, multi-process and distributed environments (https://github.com/pytorch/pytorch/pull/78762, https://github.com/pytorch/pytorch/pull/78950, https://github.com/pytorch/pytorch/pull/79041, https://github.com/pytorch/pytorch/pull/79124, https://github.com/pytorch/pytorch/pull/79524) \r\n* Made `ShufflerDataPipe` deterministic with `DataLoader` in single-process, multi-process and distributed environments (https://github.com/pytorch/pytorch/pull/77741, https://github.com/pytorch/pytorch/pull/77855, https://github.com/pytorch/pytorch/pull/78765, https://github.com/pytorch/pytorch/pull/79829) \r\n* Prevented overriding shuffle settings in `DataLoader` for `DataPipe` (https://github.com/pytorch/pytorch/pull/75505)\r\n\r\n## Releng\r\n\r\n* Made `requirements.txt` as the single source of truth for TorchData version (https://github.com/pytorch/data/pull/414) \r\n* Prohibited Release GHA workflows running on forked branches. (https://github.com/pytorch/data/pull/361)\r\n\r\n# Performance\r\n\r\n## DataPipe\r\n\r\n* Lazily generated exception message for performance (https://github.com/pytorch/pytorch/pull/78673)\r\n  * Fixes regression introduced from single iterator constraint related PRs.\r\n* Disabled profiler for `IterDataPipe` by default (https://github.com/pytorch/pytorch/pull/78674)\r\n  * By skipping over the record function when the profiler is not enabled, the speedup is up to [5-6x](https://github.com/pytorch/pytorch/pull/78674#issuecomment-1146233729) for `DataPipes` when their internal operations are very simple (e.g. `IterableWrapper`)\r\n\r\n# Documentation\r\n\r\n## DataPipe\r\n\r\n* Fixed typo in TorchVision example (https://github.com/pytorch/data/pull/311)\r\n* Updated `DataPipe` naming guidelines (https://github.com/pytorch/data/pull/428)\r\n* Updated documents from `DataSet` to PyTorch `Dataset` (https://github.com/pytorch/data/pull/292)\r\n* Added examples for graphs, meshes and point clouds using `DataPipe` (https://github.com/pytorch/data/pull/337)\r\n* Added examples for semantic segmentation and time series using `DataPipe` (https://github.com/pytorch/data/pull/340)\r\n* Expanded the contribution guide, especially including instructions to add a new `DataPipe` (https://github.com/pytorch/data/pull/354)\r\n* Updated tutorial about placing `sharding_filter` (https://github.com/pytorch/data/pull/487) \r\n* Improved graph visualization documentation (https://github.com/pytorch/data/pull/504)\r\n* Added instructions about ImportError for portalocker (https://github.com/pytorch/data/pull/506)\r\n* Updated examples to avoid lambdas (https://github.com/pytorch/data/pull/524)\r\n* Updated documentation for S3 DataPipes (https://github.com/pytorch/data/pull/534)\r\n* Updated links for tutorial (https://github.com/pytorch/data/pull/543)\r\n\r\n### IterDataPipe\r\n\r\n* Fixed documentation for `IterToMapConverter`, `S3FileLister` and `S3FileLoader` (https://github.com/pytorch/data/pull/381)\r\n* Update documentation for S3 DataPipes (https://github.com/pytorch/data/pull/534)\r\n\r\n### MapDataPipe\r\n\r\n* Updated contributing guide and added guidance for `MapDataPipe` (https://github.com/pytorch/data/pull/379)\r\n    * Rather than re-implementing the same functionalities twice for both `IterDataPipe` and `MapDataPipe`, we encourage users to use the built-in functionalities of `IterDataPipe` and use the converter to `MapDataPipe` as needed.\r\n\r\n## DataLoader/DataLoader2\r\n\r\n* Fixed tutorial about `DataPipe` working with `DataLoader` (https://github.com/pytorch/data/pull/458)\r\n* Updated examples and tutorial after automatic sharding has landed (https://github.com/pytorch/data/pull/505)\r\n* Add README for DataLoader2 (https://github.com/pytorch/data/pull/526, https://github.com/pytorch/data/pull/541)\r\n\r\n## Releng\r\n\r\n* Added nightly documentation for TorchData in https://pytorch.org/data/main/\r\n* Fixed instruction to install TorchData (https://github.com/pytorch/data/pull/455) \r\n\r\n# Future Plans\r\n\r\nFor `DataLoader2`, we are introducing new ways to interact between `DataPipes`, DataLoading API, and backends (aka `ReadingServices`). Feature is stable in terms of API, but functionally not complete yet. We welcome early adopters and feedback, as well as potential contributors.\r\n\r\n# Beta Usage Note\r\n\r\nThis library is currently in the Beta stage and currently does not have a stable release. The API may change based on user feedback or performance. We are committed to bring this library to stable release, but future changes may not be completely backward compatible. If you install from source or use the nightly version of this library, use it along with the PyTorch nightly binaries. If you have suggestions on the API or use cases you'd like to be covered, please open a GitHub issue. We'd love to hear thoughts and feedback.", "reactions": {"url": "https://api.github.com/repos/pytorch/data/releases/69541557/reactions", "total_count": 3, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 3, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytorch/data/releases/61528681", "assets_url": "https://api.github.com/repos/pytorch/data/releases/61528681/assets", "upload_url": "https://uploads.github.com/repos/pytorch/data/releases/61528681/assets{?name,label}", "html_url": "https://github.com/pytorch/data/releases/tag/v0.3.0", "id": 61528681, "author": {"login": "ejguan", "id": 68879799, "node_id": "MDQ6VXNlcjY4ODc5Nzk5", "avatar_url": "https://avatars.githubusercontent.com/u/68879799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ejguan", "html_url": "https://github.com/ejguan", "followers_url": "https://api.github.com/users/ejguan/followers", "following_url": "https://api.github.com/users/ejguan/following{/other_user}", "gists_url": "https://api.github.com/users/ejguan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ejguan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ejguan/subscriptions", "organizations_url": "https://api.github.com/users/ejguan/orgs", "repos_url": "https://api.github.com/users/ejguan/repos", "events_url": "https://api.github.com/users/ejguan/events{/privacy}", "received_events_url": "https://api.github.com/users/ejguan/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDOFd21l84Dqtpp", "tag_name": "v0.3.0", "target_commitish": "main", "name": "TorchData 0.3.0 Beta Release", "draft": false, "prerelease": false, "created_at": "2022-03-10T18:06:25Z", "published_at": "2022-03-10T18:43:54Z", "assets": [], "tarball_url": "https://api.github.com/repos/pytorch/data/tarball/v0.3.0", "zipball_url": "https://api.github.com/repos/pytorch/data/zipball/v0.3.0", "body": "# 0.3.0 Release Notes\r\n\r\nWe are delighted to present the Beta release of [TorchData](https://github.com/pytorch/data). This is a library of common modular data loading primitives for easily constructing flexible and performant data pipelines. Based on community feedback, we have found that the existing DataLoader bundled too many features together and can be difficult to extend. Moreover, different use cases often have to rewrite the same data loading utilities over and over again. The goal here is to enable composable data loading through Iterable-style and Map-style building blocks called [\u201cDataPipes\u201d](https://github.com/pytorch/data#what-are-datapipes) that work well out of the box with the PyTorch\u2019s [`DataLoader`](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader).\r\n\r\n* Highlights\r\n  * What are DataPipes?\r\n  * Usage Example\r\n* New Features\r\n* Documentation\r\n* Usage in Domain Libraries\r\n* Future Plans\r\n* Beta Usage Note\r\n\r\n## Highlights\r\n\r\nWe are releasing DataPipes - there are Iterable-style DataPipe ([`IterDataPipe`](https://pytorch.org/data/0.3.0/torchdata.datapipes.iter.html)) and Map-style DataPipe ([`MapDataPipe`](https://pytorch.org/data/0.3.0/torchdata.datapipes.map.html)). \r\n\r\n### What are DataPipes?\r\n\r\nEarly on, we observed widespread confusion between the PyTorch `DataSets` which represented reusable loading tooling (e.g. [TorchVision's `ImageFolder`](https://github.com/pytorch/vision/blob/main/torchvision/datasets/folder.py#L272)), and those that represented pre-built iterators/accessors over actual data corpora (e.g. [TorchVision's `ImageNet`](https://github.com/pytorch/vision/blob/main/torchvision/datasets/imagenet.py#L21)). This led to an unfortunate pattern of siloed inheritance of data tooling rather than composition.\r\n\r\n`DataPipe` is simply a renaming and repurposing of the PyTorch `DataSet` for composed usage. A `DataPipe` takes in some access function over Python data structures, `__iter__` for `IterDataPipes` and `__getitem__` for `MapDataPipes` , and returns a new access function with a slight transformation applied. For example, take a look at this `JsonParser`, which accepts an IterDataPipe over file names and raw streams, and produces a new iterator over the filenames and deserialized data:\r\n\r\n```py\r\nimport json\r\n\r\nclass JsonParserIterDataPipe(IterDataPipe):\r\n    def __init__(self, source_datapipe, **kwargs) -> None:\r\n        self.source_datapipe = source_datapipe\r\n        self.kwargs = kwargs\r\n\r\n    def __iter__(self):\r\n        for file_name, stream in self.source_datapipe:\r\n            data = stream.read()\r\n            yield file_name, json.loads(data)\r\n\r\n    def __len__(self):\r\n        return len(self.source_datapipe) \r\n```\r\n\r\nYou can see in this example how DataPipes can be easily chained together to compose graphs of transformations that reproduce sophisticated data pipelines, with streamed operation as a first-class citizen.\r\n\r\nUnder this naming convention, `DataSet` simply refers to a graph of `DataPipes`, and a dataset module like `ImageNet` can be rebuilt as a factory function returning the requisite composed `DataPipes`.\r\n\r\n## Usage Example\r\n\r\nIn this example, we have a compressed TAR archive file stored in Google Drive and accessible via an URL. We demonstrate how you can use DataPipes to download the archive, cache the result, decompress the archive, filter for specific files, parse and return the CSV content. The full example with detailed explanation is [included in the example folder](https://github.com/pytorch/data/blob/release/0.3.0/examples/text/amazonreviewpolarity.py).\r\n\r\n```py\r\nurl_dp = IterableWrapper([URL])\r\ncache_compressed_dp = GDriveReader(cache_compressed_dp)\r\n# cache_decompressed_dp = ... # See source file for full code example\r\n# Opens and loads the content of the TAR archive file.\r\ncache_decompressed_dp = FileOpener(cache_decompressed_dp, mode=\"b\").load_from_tar()\r\n# Filters for specific files based on the file name.\r\ncache_decompressed_dp = cache_decompressed_dp.filter(\r\n    lambda fname_and_stream: _EXTRACTED_FILES[split] in fname_and_stream[0]\r\n)\r\n# Saves the decompressed file onto disk.\r\ncache_decompressed_dp = cache_decompressed_dp.end_caching(mode=\"wb\", same_filepath_fn=True)\r\ndata_dp = FileOpener(cache_decompressed_dp, mode=\"b\")\r\n# Parses content of the decompressed CSV file and returns the result line by line. return \r\nreturn data_dp.parse_csv().map(fn=lambda t: (int(t[0]), \" \".join(t[1:])))\r\n```\r\n\r\n## New Features\r\n\r\n[Beta] [IterDataPipe](https://pytorch.org/data/0.3.0/torchdata.datapipes.iter.html)\r\n\r\nWe have implemented over 50 Iterable-style DataPipes across 10 different categories. They cover different functionalities, such as opening files, parsing texts, transforming samples, caching, shuffling, and batching. For users who are interested in connecting to cloud providers (such as Google Drive or AWS S3), the [fsspec and iopath DataPipes](https://pytorch.org/data/0.3.0/torchdata.datapipes.iter.html#io-datapipes) will allow you to do so. The documentation provides detailed explanations and usage examples of each `IterDataPipe`. \r\n\r\n[Beta] [MapDataPipe](https://pytorch.org/data/0.3.0/torchdata.datapipes.map.html)\r\n\r\nSimilar to `IterDataPipe`, we have various, but a more limited number of `MapDataPipe` available for different functionalities. More `MapDataPipes` support will come later. If the existing ones do not meet your needs, you can write a custom DataPipe.\r\n\r\n## Documentation\r\n\r\nThe [documentation for TorchData](https://pytorch.org/data) is now live. It contains a tutorial that covers [how to use DataPipes](https://pytorch.org/data/0.3.0/tutorial.html#using-datapipes), [use them with DataLoader](https://pytorch.org/data/0.3.0/tutorial.html#working-with-dataloader), and [implement custom ones](https://pytorch.org/data/0.3.0/tutorial.html#implementing-a-custom-datapipe).\r\n\r\n## Usage in Domain Libraries\r\n\r\nIn this release, some of the PyTorch domain libraries have migrated their datasets to use DataPipes. In TorchText, the [popular datasets provided by the library](https://github.com/pytorch/text/tree/release/0.12/torchtext/datasets) are implemented using DataPipes and a [section of its SST-2 binary text classification tutorial](https://pytorch.org/text/0.12.0/tutorials/sst2_classification_non_distributed.html#dataset) demonstrates how you can use DataPipes to preprocess data for your model. There also are other prototype implementations of datasets with DataPipes in [TorchVision (available in nightly releases](https://github.com/pytorch/vision/tree/main/torchvision/prototype/datasets/_builtin)) and in [TorchRec](https://pytorch.org/torchrec/torchrec.datasets.html). You can find more [specific examples here](https://pytorch.org/data/0.3.0/examples.html).\r\n\r\n## Future Plans\r\n\r\nThere will be a new version of DataLoader in the next release. At the high level, the plan is that DataLoader V2 will only be responsible for multiprocessing, distributed, and similar functionalities, not data processing logic. All data processing features, such as the shuffling and batching, will be moved out of DataLoader to DataPipe. At the same time, the current/old version of DataLoader should still be available and you can use DataPipes with that as well.\r\n\r\n## Beta Usage Note\r\n\r\nThis library is currently in the Beta stage and currently does not have a stable release. The API may change based on user feedback or performance. We are committed to bring this library to stable release, but future changes may not be completely backward compatible. If you install from source or use the nightly version of this library, use it along with the PyTorch nightly binaries. If you have suggestions on the API or use cases you'd like to be covered, please open a GitHub issue. We'd love to hear thoughts and feedback.\r\n", "reactions": {"url": "https://api.github.com/repos/pytorch/data/releases/61528681/reactions", "total_count": 9, "+1": 1, "-1": 0, "laugh": 0, "hooray": 4, "confused": 0, "heart": 2, "rocket": 2, "eyes": 0}}
